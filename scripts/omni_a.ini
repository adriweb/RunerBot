[aliases]
n0=/omni.dir {
n1=  return $qt($gettok(%omni.dir $+ \ $+ $replace($1-,$chr(32),\),1-,$asc(\)) $+ \)
n2=}
n3=/omni.enabled {
n4=  return %omni.enabled
n5=}
n6=/omni.pastebin.devkey {
n7=  return %omni.pastebin.devkey
n8=}
n9=/omni.nocolor {
n10=  return
n11=}
n12=/omni.noformat {
n13=  return #cemetech #omnimaga2 echo
n14=}
n15=/omni.nodesc {
n16=  return
n17=}
n18=/omni.nolimit {
n19=  return #omnimaga-spam
n20=}
n21=
n22=/omni.file {
n23=  return $qt($noqt($omni.dir($2-)) $+ $1)
n24=}
n25=/omni.z80.includes {
n26=  if $1 == 8384 {
n27=    return ti83plus.inc dcs7.inc axe.inc
n28=  }
n29=  if $1 == 84pcse {
n30=    return ti84pcse.inc
n31=  }
n32=  if $1 == 8384pce {
n33=    return ti84pce.inc
n34=  }
n35=}
n36=/omni.msg {
n37=  if $istok($omni.nocolor,$gettok($1-,1,32),32) {
n38=    msg $strip($remove($1-,),c)
n39=  }
n40=  elseif $istok($omni.noformat,$gettok($1-,1,32),32) {
n41=    msg $strip($1-)
n42=  }
n43=  else {
n44=    msg $1-
n45=  }
n46=}
n47=/omni.nick {
n48=  if ($me == $anick) {
n49=    nick $mnick
n50=    .timeromni.nick 0 60 omni.nick
n51=  }
n52=  else if ($me == $mnick) {
n53=    .timeromni.nick off
n54=  }
n55=}
n56=/omni.class {
n57=  return 14[7 $+ $1 $+ 14]
n58=}
n59=/omni.divider {
n60=  return 14|01
n61=}
n62=/omni.asmdivider {
n63=  return 14\01
n64=}
n65=/omni.user.version {
n66=  return 2
n67=}
n68=/omni.user.formatfile {
n69=  return $omni.file($omni.user.version $+ .txt,user,format)
n70=}
n71=/omni.user.default {
n72=  return $gettok($read($omni.user.formatfile,ntw,$1- $+ *),2,9)
n73=}
n74=/omni.user.line {
n75=  noop $read($omni.user.formatfile,ntw,$1- $+ *)
n76=  return $readn
n77=}
n78=/omni.user.get {
n79=  return $read($1,nt,$omni.user.line($2))
n80=}
n81=/omni.user.set {
n82=  write -l $+ $omni.user.line($2) $1 $3-
n83=}
n84=/omni.user.tofile {
n85=  return $omni.file($replace($1-,*,^,:,.) $+ .txt,user)
n86=}
n87=/omni.user.filecheck {
n88=  if !$exists($1-) {
n89=    var %formatfile $omni.user.formatfile
n90=    var %i 1
n91=    while %i <= $lines(%formatfile) {
n92=      write $1- $gettok($read(%formatfile,nt,%i),2,9) $+ $crlf
n93=      inc %i
n94=    }
n95=    return
n96=  }
n97=  var %v $omni.user.get($1-,Version)
n98=  if %v <= 1 {
n99=    omni.user.set $1- Version 2
n100=    var %x $omni.user.default(Default)
n101=    write -il $+ $readn $1- %x
n102=  }
n103=}
n104=/omni.request {
n105=  var %nick $1
n106=  var %chan $2
n107=  var %omnomirc $3
n108=  var %msg $4
n109=  var %auto $5
n110=  if %auto {
n111=    return ok
n112=  }
n113=  var %user $iif(%omnomirc,%nick,$address(%nick,2))
n114=  var %file $omni.user.tofile(%user)
n115=  omni.user.filecheck %file
n116=  if (%nick != $me) && ($read(%file,nt,$omni.user.line(Unrestricted)) != 1) && !$istok($omni.nolimit,%chan,32) && (# isin %chan) {
n117=    var %rfile $omni.file(restrictions.txt)
n118=    var %line $omni.user.line(History)
n119=    var %i 0
n120=    var %duration 0
n121=    var %maxduration $gettok($read(%rfile,nt,$lines(%rfile)),2,9)
n122=    while (%line <= $lines(%file)) && (%duration < %maxduration) {
n123=      var %r $read(%file,nt,%line)
n124=      if # isin $gettok(%r,2,9) {
n125=        inc %i
n126=        var %duration $calc($ctime - $gettok(%r,1,9))
n127=        var %rline 1
n128=        while %rline <= $lines(%rfile) {
n129=          var %rr $read(%rfile,nt,%rline)
n130=          var %wait $calc($gettok(%rr,2,9) - %duration)
n131=          if (%i >= $gettok(%rr,1,9)) && (%wait > 0) {
n132=            return %wait
n133=          }
n134=          inc %rline
n135=        }
n136=      }
n137=      inc %line
n138=    }
n139=    write -il $+ $omni.user.line(History) %file $+($omni.tabpad($ctime,2),$omni.tabpad(%chan,2),%msg)
n140=  }
n141=  return ok
n142=}
n143=/omni.tabpad {
n144=  var %tabs $calc($2 - $floor($calc($len($1) / 8)))
n145=  return $1 $+ $str($chr(9),$iif(%tabs > 0,%tabs,1))
n146=}
n147=/omni.check {
n148=  if !%omni.enabled {
n149=    halt
n150=  }
n151=  var %nick $1
n152=  var %chan $2
n153=  if # !isin %chan {
n154=    var %chan %nick
n155=    tokenize 32 $1 %nick $2-
n156=  }
n157=  var %omnomirc $3
n158=  var %msg $strip($4-)
n159=  var %user $iif(%omnomirc,%nick,$address(%nick,2))
n160=  var %file $omni.user.tofile(%user)
n161=  var %auto 0
n162=  while 1 {
n163=    if $istok(. ! @,$left(%msg,1),32) {
n164=      if %omnomirc == 1 {
n165=        var %target omni.msg %chan
n166=        var %errortarget omni.msg %chan
n167=        var %requesttarget noop
n168=      }
n169=      else {
n170=        var %requesttarget notice %nick
n171=        if (%nick == %chan) || $istok(! @,$left(%msg,1),32) {
n172=          var %target omni.msg %chan
n173=          var %errortarget omni.msg %chan
n174=        }
n175=        elseif %nick == $me {
n176=          var %target echo -a
n177=          var %errortarget echo -a
n178=          var %requesttarget echo -a
n179=        }
n180=        else {
n181=          var %target notice %nick
n182=          var %errortarget notice %nick
n183=        }
n184=      }
n185=      if %auto {
n186=        var %errortarget noop 0
n187=      }
n188=      var %msg1 $right(%msg,-1)
n189=      var %do
n190=      .fopen cmds $omni.file(cmds.txt)
n191=      while !$ferr {
n192=        tokenize 9 $fread(cmds)
n193=        if $1 == $null {
n194=          break
n195=        }
n196=        var %regex $1
n197=        var %class
n198=        var %title
n199=        var %response
n200=        var %classopt
n201=        if ($1 != $null) && ($2 == $null) {
n202=          var %do %errortarget ERROR: GRAPE
n203=          break
n204=        }
n205=        if $5 != $null {
n206=          var %do %errortarget ERROR: GRAPEFRUIT
n207=          break
n208=        }
n209=        if $4 != $null {
n210=          var %response $4
n211=          var %title $3
n212=          var %class $2
n213=        }
n214=        elseif $3 != $null {
n215=          var %response $3
n216=          var %title $2
n217=        }
n218=        else {
n219=          var %response $2
n220=        }
n221=        if $right(%class,1) == ? {
n222=          var %class $left(%class,-1)
n223=          var %classopt 1
n224=        }
n225=        if $regex(%msg1,$+(/^,$iif(%classopt,$+($chr(40),%class,$chr(32),$chr(41),?)),%regex,$,/i)) {
n226=          var %do %target $iif(%class != $null,$omni.class(%class)) $iif(%title != $null,$+(,%title,:)) %response
n227=          break
n228=        }
n229=      }
n230=      .fclose cmds
n231=      if %do == $null {
n232=        tokenize 32 %nick %chan %omnomirc %target %errortarget %msg1
n233=        if $omni.basic.check(%chan,%msg1) {
n234=          var %do omni.basic $1-
n235=        }
n236=        elseif $omni.z80.check(%chan,%msg1) {
n237=          var %do omni.z80 $1-
n238=        }
n239=        elseif $omni.axe.check(%chan,%msg1) {
n240=          var %do omni.axe $1-
n241=        }
n242=        elseif $omni.sprite.check(%chan,%msg1) {
n243=          var %do omni.sprite $1-
n244=        }
n245=        elseif $omni.color.check(%chan,%msg1) {
n246=          var %do omni.color $1-
n247=        }
n248=        elseif $regex(%msg1,/^port /i) {
n249=          var %do omni.z80 %nick %chan %omnomirc %target %errortarget $left(%msg,1) $+ z80 %msg1
n250=        }
n251=        elseif $regex(%msg1,/^(?:set)?default ?(.*)/i) {
n252=          var %do omni.user.set %file Default $regml(1)
n253=        }
n254=      }
n255=    }
n256=    if %do != $null {
n257=      var %request $omni.request(%nick,%chan,%omnomirc,%msg,%auto)
n258=      if %request != ok {
n259=        %requesttarget To prevent spam, you are only allowed to use commands in the channel so often. You may either wait $duration(%request) or /query me at any time.
n260=        halt
n261=      }
n262=      %do
n263=      halt
n264=    }
n265=    if %auto || (%chan != %nick && $len($strip(%msg)) <= 2) {
n266=      halt
n267=    }
n268=    var %msg $omni.user.get(%file,Default) %msg
n269=    var %auto 1
n270=  }
n271=}
n272=/omni.basic.check {
n273=  return $regex($2,/^(ti|ti-)?basic\b/i)
n274=}
n275=/omni.basic.syntax {
n276=
n277=}
n278=/omni.basic.help {
n279=
n280=}
n281=/omni.basic {
n282=
n283=}
n284=/omni.z80.check {
n285=  return $omni.z80.getmodel($gettok($2,1,32))
n286=}
n287=/omni.z80.syntax {
n288=
n289=}
n290=/omni.z80.help {
n291=
n292=}
n293=/omni.z80 {
n294=  var %nick $1
n295=  var %chan $2
n296=  var %omnomirc $3
n297=  var %target $4-5
n298=  var %errortarget $6-7
n299=  var %command $8
n300=  var %model $omni.z80.getmodel(%command)
n301=  var %class $iif(%model == 8384pce,eZ80,Z80)
n302=  set -ln %query $strip($9-)
n303=  if %query == $null {
n304=    %errortarget $omni.class(%class) ERROR $omni.divider No query entered.
n305=    halt
n306=  }
n307=  if $gettok(%query,1,32) == port {
n308=    if $regex(%query,/^port \$?([0-9A-F][0-9A-F]?)h?/i) {
n309=      var %port $upper($iif($len($regml(1)) == 1,0) $+ $regml(1))
n310=      wikiti -gt /<b>Function:<\/b> $+ $chr(160) $+ (.+)/ 83Plus:Ports: $+ %port omni.z80.port $1-8 %port
n311=      halt
n312=    }
n313=    else {
n314=      %errortarget $omni.class(%class) ERROR $omni.divider Invalid port number.
n315=      halt
n316=    }
n317=  }
n318=  if $regex(%query,/^\s*dec\s+(b|c|d|e|h|l|\(hl\)|a|bc|de|hl|sp|i[xy]h|i[xy]l|i[xy]|\(i[xy].*\))( |$)/i) {
n319=    goto assembly
n320=  }
n321=  if $regex(%query,/^(what is|what's|calc|calculate|calculator|b|bin|binary|o|oct|octal|d|dec|decimal|h|hex|hexadecimal|chr|char)( |$)(.*)/i) {  
n322=    var %forcecalc 1
n323=    goto calc
n324=  }
n325=  if $regex(%query,/^(\.assume +adl *= *[01] +(\\ +)?|adl +|z80 +)?[ 0-9a-f]*[0-9abcdef]$/i) {
n326=    goto disassembly
n327=  }
n328=  if \ isin %query {
n329=    goto assembly
n330=  }
n331=  :calc
n332=  if $regex(%query,/^(what is|what's|calc|calculate|calculator)( |$)(.*(?<!\?))/i) {
n333=    set -ln %query $regml(3)
n334=    var %forcecalc 1
n335=  }
n336=  if $regex(%query,/^(b|bin|binary)( |$)(.*)/i) {
n337=    set -ln %query $regml(3)
n338=    var %base 2
n339=    var %forcecalc 1
n340=  }
n341=  elseif $regex(%query,/^(o|oct|octal)( |$)(.*)/i) {
n342=    set -ln %query $regml(3)
n343=    var %base 8
n344=    var %forcecalc 1
n345=  }
n346=  elseif $regex(%query,/^(d|dec|decimal)( |$)(.*)/i) {
n347=    set -ln %query $regml(3)
n348=    var %base 10
n349=    var %forcecalc 1
n350=  }
n351=  elseif $regex(%query,/^(h|hex|hexadecimal)( |$)(.*)/i) {
n352=    set -ln %query $regml(3)
n353=    var %base 16
n354=    var %forcecalc 1
n355=  }
n356=  elseif $regex(%query,/^(chr|char)( |$)(.*)/i) {
n357=    set -ln %query $regml(3)
n358=    var %base char
n359=    var %forcecalc 1
n360=  }
n361=  else {
n362=    var %base auto
n363=  }
n364=  if %query == $null {
n365=    %errortarget $omni.class(%class) ERROR $omni.divider No expression entered.
n366=    halt
n367=  }
n368=  var %wordsize $iif(%class == z80,16,24)
n369=  var %calc $omni.z80.a.calc(%query,%model,%base,%wordsize,big format)
n370=  if %calc != $null {
n371=    if ($gettok(%calc,2,32) != $null) {
n372=      var %base $gettok(%calc,2,32)
n373=      if ($gettok(%calc,3,32) == 1) && $regex(%query,/^-?[0-9a-z$%@]/i) {
n374=        var %base $iif(%base == 16,10,16)
n375=        var %calc $omni.z80.a.calc($gettok(%calc,1,32),%model,%base,%wordsize,big format)
n376=      }
n377=      var %calc $gettok(%calc,1,32)
n378=    }
n379=    %target $omni.class(%class) Calculator $omni.divider %query == $omni.z80.color.imm $+ $iif($left(%calc,3) == $ $+ 00,$ $+ $right(%calc,-3),$iif($left(%calc,9) == % $+ 00000000,% $+ $right(%calc,-9),%calc))
n380=    halt
n381=  }
n382=  if %forcecalc {
n383=    %errortarget $omni.class(%class) ERROR $omni.divider Could not compute: %query
n384=    halt
n385=  }
n386=  :assembly
n387=  var %assembly $omni.z80.a(%query,%model,%class)
n388=  if error* iswm %assembly {
n389=    if $istok(lego legos,%query,32) {
n390=      %errortarget $omni.class(%class) Assembly $omni.divider http://tinyurl.com/4zq9pjb
n391=      halt
n392=    }
n393=    %errortarget $omni.class(%class) ERROR $omni.divider Could not assemble: $gettok(%assembly,2-,32)
n394=    halt
n395=  }
n396=  var %file $omni.file(assembly.txt,%class)
n397=  if ($lines(%file) == 1) && (.d !isin %query) {
n398=    var %query %assembly
n399=    goto disassembly
n400=  }
n401=  rafb 1 %file omni.z80.a.pastebin $1-8
n402=  halt
n403=  :disassembly
n404=  if $findtok(%query,add,32) || $findtok(%query,ccf,32) || $findtok(%query,daa,32) {
n405=    goto assembly
n406=  }
n407=  var %adl $iif(%class == eZ80,1,0)
n408=  var %dishex %query
n409=  if $regex(%dishex,/^(?:\.assume +adl *= *([01]) +(?:\\ +)?)(.+)/i) {
n410=    var %adl $regml(1)
n411=    var %dishex $regml(2)
n412=  }
n413=  elseif $gettok(%dishex,1,32) == adl {
n414=    var %adl 1
n415=    var %dishex $gettok(%dishex,2-,32)
n416=  }
n417=  elseif $gettok(%dishex,1,32) == z80 {
n418=    var %adl 0
n419=    var %dishex $gettok(%dishex,2-,32)
n420=  }
n421=  var %dishex $remove($upper(%dishex),$chr(32))
n422=  var %disassembly $omni.z80.d(%dishex,%model,%class,%adl,1)
n423=  if error parity == %disassembly {
n424=    if $regex(%dishex,/^[0-9]+$/) {
n425=      goto calc
n426=    }
n427=    %errortarget $omni.class(%class) ERROR $omni.divider Odd number of hexadecimal characters entered.
n428=    halt
n429=  }
n430=  if error invalid != %disassembly {
n431=    ; echo -s . %disassembly
n432=    var %file $omni.file(disassembly.txt,%class)
n433=    if (error length != %disassembly) && ($lines(%file) == 1) && !$regex($read(%file,nt,1),/^\s*\./) {
n434=      var %action
n435=      if $left(%dishex,2) == EF {
n436=        var %action wikiti -t $+($iif(%model == 8384pce,84PCE:Syscalls,$iif(%model == 8384,83Plus,84PCSE) $+ :BCALLs),:,$mid(%dishex,5,2),$mid(%dishex,3,2)))
n437=      }
n438=      %action omni.z80.instr $1-8 %adl %dishex $replace(%disassembly,$chr(32),$chr(160))
n439=      halt
n440=    }
n441=    var %disassembly $omni.z80.d(%dishex,%model,%class,%adl)
n442=    rafb -nx Z80 Disassembly 1m $omni.pastebin.devkey %file omni.z80.d.pastebin $1-8 %adl %dishex $replace(%disassembly,$chr(32),$chr(160))
n443=    halt
n444=  }
n445=}
n446=/omni.z80.getmodel {
n447=  if $regex($1,/^(z80|8[34][+p](se)?)$/i) {
n448=    return 8384
n449=  }
n450=  if $regex($1,/^(84[+p]cse)$/i) {
n451=    return 84pcse
n452=  }
n453=  if $regex($1,/^(ez80|8[34][+p]ce)$/i) {
n454=    return 8384pce
n455=  }
n456=}
n457=/omni.z80.textparse {
n458=  unset %omni.z80.d.*
n459=  set %omni.z80.d.model $2
n460=  set %omni.z80.d.class $3
n461=  set %omni.z80.d.ez80 $iif($3 == eZ80,1,0)
n462=  set %omni.z80.d.adl %omni.z80.d.ez80
n463=  set %omni.z80.d.general 1
n464=  var %dishex $4
n465=  if $findtok(40 49 52 5B,$left(%dishex,2),32) {
n466=    set %omni.z80.d.suffix $left(%dishex,2)
n467=    var %dishex $right(%dishex,-2)
n468=  }
n469=  if $left(%dishex,2) == DD {
n470=    set %omni.z80.d.index ix
n471=  }
n472=  elseif $left(%dishex,2) == FD {
n473=    set %omni.z80.d.index iy
n474=  }
n475=  var %a $omni.z80.mparse($1)
n476=  unset %omni.z80.d.*
n477=  return %a
n478=}
n479=/omni.z80.port {
n480=  var %nick $1
n481=  var %chan $2
n482=  var %omnomirc $3
n483=  var %target $4-5
n484=  var %errortarget $6-7
n485=  var %command $8
n486=  var %model $omni.z80.getmodel(%command)
n487=  var %class $iif(%model == 8384pce,eZ80,Z80)
n488=  var %port $9
n489=  var %function $iif($numtok($1-,32) != 10,$gettok($1-,10- $+ $calc($numtok($1-,32) - 1),32))
n490=  var %page $iif($numtok($1-,32) >= 10,$gettok($1-,$numtok($1-,32),32))
n491=  if %page == $null {
n492=    %errortarget $omni.class(%class) ERROR $omni.divider Port %port could not be found on WikiTI.
n493=    halt
n494=  }
n495=  %target $omni.class(%class) Port $omni.z80.color.bold(%port) $+ $iif(%function != $null,: %function) $omni.divider Info: %page
n496=}
n497=/omni.z80.instr {
n498=  var %nick $1
n499=  var %chan $2
n500=  var %omnomirc $3
n501=  var %target $4-5
n502=  var %errortarget $6-7
n503=  var %command $8
n504=  var %model $omni.z80.getmodel(%command)
n505=  var %class $iif(%model == 8384pce,eZ80,Z80)
n506=  var %ez80 $iif(%class == eZ80,1,0)
n507=  var %adl $9
n508=  var %dishex $10
n509=  var %disassembly $replace($11,$chr(160),$chr(32))
n510=  var %disstripped $strip(%disassembly)
n511=  var %wikiti $12
n512=  ; echo -s . $1-
n513=  var %disassembly2 $omni.z80.d(%dishex,%model,%class,%adl)
n514=  ; var %r $read($omni.file(ops.txt,%class),ntw,* $+ $chr(9) $+ %disstripped $+ $chr(9) $+ *)
n515=  var %suffix
n516=  var %suffixnum $findtok(40 49 52 5B,$left(%dishex,2),32)
n517=  var %suffixbits 11
n518=  var %r $omni.z80.instr.lookup(%dishex,%class)
n519=  ; echo -s . %r
n520=  if %ez80 && ((%r == $null) || (%suffixnum && ($gettok(%r,1,9) == 01......))) {
n521=    if %suffixnum {
n522=      var %suffix $left(%dishex,2)
n523=      dec %suffixnum
n524=      var %suffixbits $base(%suffixnum,10,2,2)
n525=      var %r $omni.z80.instr.lookup($right(%dishex,-2),%class)
n526=    }
n527=  }
n528=  if %r == $null {
n529=    %errortarget $omni.class(%class) ERROR $omni.divider This error should not have happened. Make sure the human who maintains me knows about this! ERROR CODE: BANANA
n530=    halt
n531=  }
n532=  if 0 {
n533=    var %bytes $gettok(%r,3,9)
n534=    var %cycles $gettok(%r,4,9)
n535=    if %ez80 {
n536=      var %ccycles $gettok(%r,5,9)
n537=      var %documented *
n538=      var %s $iif(%suffix == 40 || %suffix == 52,1,0)
n539=      var %is $iif(%suffix == 40 || %suffix == 49,1,0)
n540=      var %xcycles 0
n541=      if %suffix != $null {
n542=        inc %bytes
n543=        inc %xcycles
n544=      }
n545=      if %s {
n546=        if $regex(%disstripped,/^p(ush|op|ea) /i) {
n547=          dec %xcycles
n548=        }
n549=        elseif ex (sp)* iswm %disstripped {
n550=          dec %xcycles 2
n551=        }
n552=        elseif $regex(%disstripped,/^ld (reg24|ix|iy) $+ $chr(44) $+ \ $+ $chr(40) $+ (hl|ix\+ofs8|iy\+ofs8)/i) {
n553=          dec %xcycles 1
n554=        }
n555=        elseif $regex(%disstripped,/^ld \ $+ $chr(40) $+ (hl|ix\+ofs8|iy\+ofs8).*\ $+ $chr(41) $+ $chr(44) $+ (reg24|ix|iy)/i) {
n556=          dec %xcycles 1
n557=        }
n558=      }
n559=      if %is {
n560=        if *(imm24)* iswm %disstripped {
n561=          dec %bytes
n562=          dec %xcycles 2
n563=        }
n564=        elseif *imm24* iswm %disstripped {
n565=          dec %bytes
n566=          dec %xcycles
n567=        }
n568=      }
n569=      if $regex(%cycles,/(.+)\/(.+)/) {
n570=        var %cycles $calc($regml(1) + %xcycles) $+ / $+ $calc($regml(2) + %xcycles)
n571=      }
n572=      else {
n573=        var %cycles $calc(%cycles + %xcycles)
n574=      }
n575=    }
n576=    else {
n577=      var %documented $gettok(%r,5,9)
n578=      var %ccycles *
n579=    }
n580=    if $chr(47) isin %cycles && reg8 isin %disstripped {
n581=      if $numtok(%cycles,47) == 2 {
n582=        var %cycles $gettok(%cycles,$iif($chr(40) $+ hl $+ $chr(41) isin %disassembly2,2,1),47)
n583=      }
n584=      if $numtok(%ccycles,47) == 2 {
n585=        var %ccycles $gettok(%ccycles,$iif($chr(40) $+ hl $+ $chr(41) isin %disassembly2,2,1),47)
n586=      }
n587=    }
n588=    var %flags $gettok(%r,6,9)
n589=    var %description $gettok(%r,7,9)
n590=    %target $omni.class(%class) Instruction $iif(%disassembly != %disassembly2,$omni.divider Class: $omni.z80.color.bold(%disassembly)) $iif($left($strip(%disassembly2),1) != .,$omni.divider Instance: $omni.z80.color.bold(%disassembly2) $+([,$omni.z80.color.def,%dishex,$omni.z80.color.punct,])) $iif(%bytes != *,$omni.divider Bytes: $omni.z80.color.bold(%bytes)) $iif((%cycles != *) || (%ccycles != *),$omni.divider Cycles: $omni.z80.color.bold(%cycles $+ $iif(%ez80 && (%ccycles != 0),$chr(32) $+ MEM $+ $chr(44) %ccycles CPU))) $iif(%flags != *,$omni.divider Flags: $omni.z80.color.bold(%flags)) $iif(%documented == 0,$omni.divider Undocumented) $iif(!$istok($omni.nodesc,$gettok(%target,2,32),32),$iif(%description != *,$omni.divider Description: $omni.z80.textparse(%description,%model,%class,%dishex))) $iif(%wikiti != $null,$omni.divider More info: %wikiti)
n591=  }
n592=  else {
n593=    var %c 3
n594=    var %bytes $gettok(%r,%c,9)
n595=    inc %c
n596=    var %cycles $gettok(%r,%c,9)
n597=    while $regex(%cycles,/(.*)\((\d+)\+\.(i?)([sl])\)(.*)/) {
n598=      var %cycles $regml(1) $+ $calc($regml(2) + $xor($mid(%suffixbits,$iif($regml(3) == i,1,2),1),$iif($regml(4) == s,1,0))) $+ $regml(5)
n599=    }
n600=    if %suffix {
n601=      ; echo . %suffixbits . %disstripped
n602=      ; echo . $not($iif(!$left(%suffixbits,1) && (*imm24* iswm %disstripped),1,0)) . $iif(*imm24* iswm %disstripped,1,0)
n603=      if $left(%suffixbits,1) || (*imm24* !iswm %disstripped) {
n604=        inc %bytes
n605=      }
n606=      noop $regex(%cycles,/(.*)(\d+)(F\b.*)/)
n607=      var %cycles $regml(1) $+ $calc($regml(2) + 1) $+ $regml(3)
n608=    }
n609=    inc %c
n610=    if %ez80 {
n611=      var %documented *
n612=    }
n613=    else {
n614=      var %documented $gettok(%r,%c,9)
n615=      inc %c
n616=    }
n617=    var %flags $gettok(%r,%c,9)
n618=    inc %c
n619=    var %description $gettok(%r,%c,9)
n620=    inc %c
n621=    %target $omni.class(%class) Instruction $iif(%disassembly != %disassembly2,$omni.divider Class: $omni.z80.color.bold(%disassembly)) $iif($left($strip(%disassembly2),1) != .,$omni.divider Instance: $omni.z80.color.bold(%disassembly2) $+([,$omni.z80.color.def,%dishex,$omni.z80.color.punct,])) $iif(%bytes != *,$omni.divider Bytes: $omni.z80.color.bold(%bytes)) $iif(%cycles != *,$omni.divider Cycles: $omni.z80.color.bold(%cycles)) $iif(%flags != *,$omni.divider Flags: $omni.z80.color.bold(%flags)) $iif(%documented == 0,$omni.divider Undocumented) $iif(!$istok($omni.nodesc,$gettok(%target,2,32),32),$iif(%description != *,$omni.divider Description: $omni.z80.textparse(%description,%model,%class,%dishex))) $iif(%wikiti != $null,$omni.divider More info: %wikiti)
n622=  }
n623=}
n624=/omni.z80.instr.lookup {
n625=  var %dishex $1
n626=  var %class $2
n627=  var %disbin $base(%dishex,16,2,$calc($len(%dishex) * 4))
n628=  .fopen omni.z80.ops $omni.file(ops.txt,%class)
n629=  while !$feof {
n630=    var %r $fread(omni.z80.ops)
n631=    if ($gettok(%r,1,9) != $null) && $regex(%disbin $+ 00000000000000000000000000000000,/^ $+ $gettok(%r,1,9) $+ .*/) {
n632=      break
n633=    }
n634=    var %r
n635=  }
n636=  .fclose omni.z80.ops
n637=  return %r
n638=}
n639=/omni.z80.d.pastebin {
n640=  tinyurl $12 omni.z80.d.tinyurl $1-11
n641=}
n642=/omni.z80.d.tinyurl {
n643=  var %nick $1
n644=  var %chan $2
n645=  var %omnomirc $3
n646=  var %target $4-5
n647=  var %errortarget $6-7
n648=  var %command $8
n649=  var %model $omni.z80.getmodel(%command)
n650=  var %class $iif(%model == 8384pce,eZ80,Z80)
n651=  var %adl $9
n652=  var %dishex $10
n653=  var %disassembly $11
n654=  var %pastebin $12
n655=  %target $omni.class(%class) Disassembly $omni.divider $iif(error* !iswm %pastebin,%pastebin $omni.divider) $omni.z80.color.bold($calc($len(%dishex) / 2) bytes) $iif($lines($omni.file(disassembly.txt,%class)) <= 10,$omni.divider $replace(%disassembly,$chr(160),$chr(32)))
n656=}
n657=/omni.z80.a.pastebin {
n658=  tinyurl $9 omni.z80.a.tinyurl $1-8
n659=}
n660=/omni.z80.a.tinyurl {
n661=  var %nick $1
n662=  var %chan $2
n663=  var %omnomirc $3
n664=  var %target $4-5
n665=  var %errortarget $6-7
n666=  var %command $8
n667=  var %model $omni.z80.getmodel(%command)
n668=  var %class $iif(%model == 8384pce,eZ80,Z80)
n669=  var %pastebin $9
n670=  var %file $omni.file(assemblyhex.txt,%class)
n671=  var %assembly
n672=  var %bold 1
n673=  var %i 1
n674=  while %i <= $lines(%file) {
n675=    if %bold {
n676=      var %assembly %assembly $+  $+ $read(%file,nt,%i) $+ 
n677=      var %bold 0
n678=    }
n679=    else {
n680=      var %assembly %assembly $+ $read(%file,nt,%i)
n681=      var %bold 1
n682=    }
n683=    inc %i
n684=  }
n685=  %target $omni.class(%class) Assembly $omni.divider $iif(error* !iswm %pastebin,%pastebin $omni.divider) $omni.z80.color.bold($calc($len($strip(%assembly)) / 2) bytes) $iif($len(%assembly) <= 50,$omni.divider $omni.z80.color.def $+ %assembly)
n686=}
n687=/omni.z80.d {
n688=  tokenize 32 $remove($1,$chr(32)) $2-
n689=  var %error $omni.hexvalidate($1)
n690=  if %error != $null {
n691=    return %error
n692=  }
n693=  unset %omni.z80.d.*
n694=  var %model $2
n695=  set %omni.z80.d.model $2
n696=  var %class $3
n697=  var %ez80 $iif(%class == ez80,1,0)
n698=  set %omni.z80.d.class %class
n699=  set %omni.z80.d.ez80 %ez80
n700=  set %omni.z80.d.adl $iif($4 != null,$4,0)
n701=  if $5 {
n702=    set %omni.z80.d.general 1
n703=    set %omni.z80.d.generalsuffix 1
n704=  }
n705=  .fclose omni.z80.d.*
n706=  .fopen -o omni.z80.d.file $omni.file(disassembly.txt,%class)
n707=  .fopen -o omni.z80.d.hexfile $omni.file(disassemblyhex.txt,%class)
n708=  set %omni.z80.d.true 1
n709=  set %omni.z80.d.ops 0
n710=  set %omni.z80.d.input $upper($1)
n711=  set %omni.z80.d.pos 1
n712=  while (%omni.z80.d.pos <= $len(%omni.z80.d.input)) && (%error == $null) {
n713=    if %omni.z80.d.general && (%omni.z80.d.ops > 0) {
n714=      unset %omni.z80.d.* %x %y %z %p %q
n715=      .fclose omni.z80.d.*
n716=      return error length
n717=    }
n718=    omni.z80.d.bytefeed
n719=    var %m
n720=    set %x $base($left(%omni.z80.d.bin,2),2,10)
n721=    set %y $base($mid(%omni.z80.d.bin,3,3),2,10)
n722=    set %z $base($right(%omni.z80.d.bin,3),2,10)
n723=    set %p $base($mid(%omni.z80.d.bin,3,2),2,10)
n724=    set %q $base($mid(%omni.z80.d.bin,5,1),2,10)
n725=    if %omni.z80.d.prefix == $null {
n726=      if %x == 0 {
n727=        if %z == 0 {
n728=          if %y == 0 {
n729=            var %m nop
n730=          }
n731=          elseif %y == 1 {
n732=            var %m ex .reg16af[3;1],.reg16af[3;1]'
n733=          }
n734=          elseif %y == 2 {
n735=            var %m djnz .ofs8pc[]
n736=          }
n737=          elseif %y == 3 {
n738=            var %m jr .ofs8pc[]
n739=          }
n740=          else {
n741=            var %m jr .cc[$calc(%y - 4)],.ofs8pc[]
n742=          }
n743=        }
n744=        elseif %z == 1 {
n745=          if %q == 0 {
n746=            var %m ld .reg16[%p],.imm16[]
n747=          }
n748=          else {
n749=            var %m add .reg16[2;1],.reg16[%p]
n750=          }
n751=        }
n752=        elseif %z == 2 {
n753=          if %q == 0 {
n754=            if (%p == 0) || (%p == 1) {
n755=              var %m ld .punct[](.reg16[%p;1]),.reg8[7;1]
n756=            }
n757=            elseif %p == 2 {
n758=              var %m ld .punct[](.imm16[]),.reg16[2;1]
n759=            }
n760=            else {
n761=              var %m ld .punct[](.imm16[]),.reg8[7;1]
n762=            }
n763=          }
n764=          else {
n765=            if (%p == 0) || (%p == 1) {
n766=              var %m ld .reg8[7;1],(.reg16[%p;1])
n767=            }
n768=            elseif %p == 2 {
n769=              var %m ld .reg16[2;1],(.imm16[])
n770=            }
n771=            else {
n772=              var %m ld .reg8[7;1],(.imm16[])
n773=            }
n774=          }
n775=        }
n776=        elseif %z == 3 {
n777=          if %q == 0 {
n778=            var %m inc .reg16[%p]
n779=          }
n780=          else {
n781=            var %m dec .reg16[%p]
n782=          }
n783=        }
n784=        elseif %z == 4 {
n785=          var %m inc .reg8[%y]
n786=        }
n787=        elseif %z == 5 {
n788=          var %m dec .reg8[%y]
n789=        }
n790=        elseif %z == 6 {
n791=          var %m ld .reg8[%y],.imm8[]
n792=        }
n793=        else {
n794=          if %y == 0 {
n795=            var %m rlca
n796=          }
n797=          elseif %y == 1 {
n798=            var %m rrca
n799=          }
n800=          elseif %y == 2 {
n801=            var %m rla
n802=          }
n803=          elseif %y == 3 {
n804=            var %m rra
n805=          }
n806=          elseif %y == 4 {
n807=            var %m daa
n808=          }
n809=          elseif %y == 5 {
n810=            var %m cpl
n811=          }
n812=          elseif %y == 6 {
n813=            var %m scf
n814=          }
n815=          else {
n816=            var %m ccf
n817=          }
n818=        }
n819=      }
n820=      elseif %x == 1 {
n821=        var %m ld .reg8[%y],.reg8[%z]
n822=        if %z == %y {
n823=          if %z == 6 {
n824=            var %m halt
n825=          }
n826=          elseif %ez80 && %z < 4 {
n827=            set %omni.z80.d.suffix %omni.z80.d.byte
n828=            var %m
n829=          }
n830=        }
n831=      }
n832=      elseif %x == 2 {
n833=        var %m .alu[%y].reg8[%z]
n834=      }
n835=      else {
n836=        if %z == 0 {
n837=          var %m ret .cc[%y]
n838=        }
n839=        elseif %z == 1 {
n840=          if %q == 0 {
n841=            var %m pop .reg16af[%p]
n842=          }
n843=          else {
n844=            if %p == 0 {
n845=              var %m ret
n846=            }
n847=            elseif %p == 1 {
n848=              var %m exx
n849=            }
n850=            elseif %p == 2 {
n851=              var %m jp .punct[](.reg16[2;1])
n852=            }
n853=            else {
n854=              var %m ld .reg16[3;1],.reg16[2;1]
n855=            }
n856=          }
n857=        }
n858=        elseif %z == 2 {
n859=          var %m jp .cc[%y],.imm16[]
n860=        }
n861=        elseif %z == 3 {
n862=          if %y == 0 {
n863=            var %m jp .imm16[]
n864=          }
n865=          elseif %y == 1 {
n866=            set %omni.z80.d.prefix %omni.z80.d.prefix $+ %omni.z80.d.byte
n867=          }
n868=          elseif %y == 2 {
n869=            var %m out .punct[](.imm8[]),.reg8[7;1]
n870=          }
n871=          elseif %y == 3 {
n872=            var %m in .reg8[7;1],(.imm8[])
n873=          }
n874=          elseif %y == 4 {
n875=            var %m ex .punct[](.reg16[3;1]),.reg16[2;1]
n876=          }
n877=          elseif %y == 5 {
n878=            var %m ex .reg16[1;1],.reg16[2;1]
n879=          }
n880=          elseif %y == 6 {
n881=            var %m di
n882=          }
n883=          else {
n884=            var %m ei
n885=          }
n886=        }
n887=        elseif %z == 4 {
n888=          var %m call .cc[%y],.imm16[]
n889=        }
n890=        elseif %z == 5 {
n891=          if %q == 0 {
n892=            var %m push .reg16af[%p]
n893=          }
n894=          else {
n895=            if %p == 0 {
n896=              var %m call .imm16[]
n897=            }
n898=            else {
n899=              set %omni.z80.d.prefix %omni.z80.d.prefix $+ %omni.z80.d.byte
n900=              set %omni.z80.d.index $iif(%omni.z80.d.byte == DD,ix,iy)
n901=            }
n902=          }
n903=        }
n904=        elseif %z == 6 {
n905=          if (%y < 4) || (%y == 7) {
n906=            var %m .alu[%y].imm8[]
n907=          }
n908=          else {
n909=            var %m .alu[%y].imm8[b]
n910=          }
n911=        }
n912=        else {
n913=          if !%ez80 && %y == 5 {
n914=            var %m B_CALL.punct[](.bcall[])
n915=          }
n916=          else {
n917=            var %m rst .dec2h[$calc(%y * 8)]
n918=          }
n919=        }
n920=      }
n921=    }
n922=    elseif %omni.z80.d.prefix == CB {
n923=      if %x == 0 {
n924=        if %ez80 && %y == 6 {
n925=          var %m trap
n926=        }
n927=        else {
n928=          var %m .rot[%y].reg8[%z]
n929=        }
n930=      }
n931=      elseif %x == 1 {
n932=        var %m bit .imm3[%y],.reg8[%z]
n933=      }
n934=      elseif %x == 2 {
n935=        var %m res .imm3[%y],.reg8[%z]
n936=      }
n937=      else {
n938=        var %m set .imm3[%y],.reg8[%z]
n939=      }
n940=    }
n941=    elseif %omni.z80.d.prefix == ED {
n942=      if %ez80 && %x == 0 {
n943=        if %z == 0 {
n944=          if %y != 6 {
n945=            var %m in0 .reg8[%y],(.imm8[])
n946=          }
n947=          else {
n948=            var %m in0 .punct[](.imm8[])
n949=          }
n950=        }
n951=        elseif %z == 1 {
n952=          if %y != 6 {
n953=            var %m out0 .punct[](.imm8[]),.reg8[%y]
n954=          }
n955=          else {
n956=            var %m ld .regi[1],(.reg16[2;1])
n957=          }
n958=        }
n959=        elseif %z == 2 || %z == 3 {
n960=          if %q == 0 {
n961=            var %regi $iif(%z == 3,1,0)
n962=            var %m lea $iif(%p != 3,.reg16[%p],.regi[ $+ %regi $+ ]) $+ ,.regiofs8[ $+ %regi $+ ]
n963=          }
n964=        }
n965=        elseif %z == 4 {
n966=          var %m tst a,.reg8[%y]
n967=        }
n968=        elseif %z == 6 {
n969=          if %y == 7 {
n970=            var %m ld .punct[](.reg16[2;1]),.regi[1]
n971=          }
n972=        }
n973=        elseif %z == 7 {
n974=          var %reg16 $iif(%p != 3,.reg16[%p],.regi[0])
n975=          if %q == 0 {
n976=            var %m ld %reg16 $+ ,(.reg16[2;1])
n977=          }
n978=          else {
n979=            var %m ld .punct[](.reg16[2;1]), $+ %reg16
n980=          }
n981=        }
n982=      }
n983=      elseif %x == 1 {
n984=        var %regport $iif(%ez80,.reg16[0;1],.reg8[1;1])
n985=        if %z == 0 {
n986=          if %y == 6 {
n987=            var %m in .punct[]( $+ %regport $+ )
n988=          }
n989=          else {
n990=            var %m in .reg8[%y],( $+ %regport $+ )
n991=          }
n992=        }
n993=        elseif %z == 1 {
n994=          if %y == 6 {
n995=            if !%ez80 {
n996=              var %m out .punct[]( $+ %regport $+ ),.zero[]
n997=            }
n998=          }
n999=          else {
n1000=            var %m out .punct[]( $+ %regport $+ ),.reg8[%y]
n1001=          }
n1002=        }
n1003=        elseif %z == 2 {
n1004=          if %q == 0 {
n1005=            var %m sbc .reg16[2;1],.reg16[%p]
n1006=          }
n1007=          else {
n1008=            var %m adc .reg16[2;1],.reg16[%p]
n1009=          }
n1010=        }
n1011=        elseif %z == 3 {
n1012=          if %q == 0 {
n1013=            var %m ld .punct[](.imm16[]),.reg16[%p]
n1014=          }
n1015=          else {
n1016=            var %m ld .reg16[%p],(.imm16[])
n1017=          }
n1018=        }
n1019=        elseif %z == 4 {
n1020=          if %ez80 {
n1021=            if %q == 0 {
n1022=              if %p == 0 {
n1023=                var %m neg
n1024=              }
n1025=              elseif %p == 1 {
n1026=                var %m lea .regi[0],.regiofs8[1]
n1027=              }
n1028=              elseif %p == 2 {
n1029=                var %m tst .reg8[7;1],.imm8[]
n1030=              }
n1031=              else {
n1032=                var %m tstio .imm8[]
n1033=              }
n1034=            }
n1035=            else {
n1036=              var %m mlt .reg16[%p]
n1037=            }
n1038=          }
n1039=          else {
n1040=            var %m neg
n1041=          }
n1042=        }
n1043=        elseif %z == 5 {
n1044=          if %ez80 {
n1045=            if %y == 0 {
n1046=              var %m retn
n1047=            }
n1048=            elseif %y == 1 {
n1049=              var %m reti
n1050=            }
n1051=            elseif %y == 2 {
n1052=              var %m lea .regi[1],.regiofs8[0]
n1053=            }
n1054=            elseif %y == 4 {
n1055=              var %m pea .regiofs8[0]
n1056=            }
n1057=            elseif %y == 5 {
n1058=              var %m ld .regmb[],.reg8[7;1]
n1059=            }
n1060=            elseif %y == 7 {
n1061=              var %m stmix
n1062=            }
n1063=          }
n1064=          else {
n1065=            if %y == 1 {
n1066=              var %m reti
n1067=            }
n1068=            else {
n1069=              var %m retn
n1070=            }
n1071=          }
n1072=        }
n1073=        elseif %z == 6 {
n1074=          if %ez80 {
n1075=            if %y < 4 {
n1076=              if %y != 1 {
n1077=                var %m im .im[%y]
n1078=              }
n1079=            }
n1080=            elseif %y == 4 {
n1081=              var %m pea .regiofs8[1]
n1082=            }
n1083=            elseif %y == 5 {
n1084=              var %m ld .reg8[7;1],.regmb[]
n1085=            }
n1086=            elseif %y == 6 {
n1087=              var %m slp
n1088=            }
n1089=            elseif %y == 7 {
n1090=              var %m rsmix
n1091=            }
n1092=          }
n1093=          else {
n1094=            var %m im .im[%y]
n1095=          }
n1096=        }
n1097=        else {
n1098=          if %p == 0 {
n1099=            var %m ld .reg8ir[%q;1],.reg8[7;1]
n1100=          }
n1101=          elseif %p == 1 {
n1102=            var %m ld .reg8[7;1],.reg8ir[%q;1]
n1103=          }
n1104=          elseif %y == 4 {
n1105=            var %m rrd
n1106=          }
n1107=          elseif %y == 5 {
n1108=            var %m rld
n1109=          }
n1110=        }
n1111=      }
n1112=      else {
n1113=        if %ez80 && %omni.z80.d.byte == C7 {
n1114=          var %m ld .reg8ir[0;1],.reg16[2;1]
n1115=        }
n1116=        elseif %ez80 && %omni.z80.d.byte == D7 {
n1117=          var %m ld .reg16[2;1],.reg8ir[0;1]
n1118=        }
n1119=        else {
n1120=          var %p2 $calc((%x % 2) * 4 + %p)
n1121=          var %z2 %z
n1122=          var %beforer
n1123=          var %afterr
n1124=          if %ez80 {
n1125=            if %z2 == 2 || %z2 == 3 {
n1126=              if %p2 < 2 {
n1127=                inc %p2 2
n1128=                var %beforer m
n1129=              }
n1130=              elseif %p2 == 4 {
n1131=                var %p2 3
n1132=                var %afterr x
n1133=              }
n1134=            }
n1135=            elseif %z2 == 4 && %p2 < 4 {
n1136=              var %z2 $calc(%p2 / 2 + 2)
n1137=              var %p2 $calc(%p2 % 2 + 2)
n1138=              var %beforer 2
n1139=            }
n1140=          }
n1141=          if (%p2 == 2 || %p2 == 3) && %z2 < 4 {
n1142=            var %m $+($gettok(ld cp in $iif(%p2 == 2,out,ot),$calc(%z2 + 1),32),$iif(%q,d,i),%beforer,$iif(%p2 == 3,r),%afterr)
n1143=          }
n1144=        }
n1145=      }
n1146=      if %m == $null {
n1147=        if %ez80 {
n1148=          var %m trap
n1149=        }
n1150=        else {
n1151=          set %omni.z80.d.hex $left(%omni.z80.d.hex,2)
n1152=          omni.z80.d.write noni
n1153=          set %omni.z80.d.hex %omni.z80.d.byte
n1154=          var %m nop
n1155=        }
n1156=      }
n1157=    }
n1158=    elseif (%omni.z80.d.prefix == DD) || (%omni.z80.d.prefix == FD) {
n1159=      if %x == 0 {
n1160=        if %z == 1 {
n1161=          if %q == 0 {
n1162=            if %p == 2 {
n1163=              var %m ld .regi[],.imm16[]
n1164=            }
n1165=            elseif %ez80 && %p == 3 {
n1166=              var %m ld .regiopp[],(.regiofs8[])
n1167=            }
n1168=          }
n1169=          else {
n1170=            var %m add .regi[],.reg16i[%p]
n1171=          }
n1172=        }
n1173=        elseif %z == 2 {
n1174=          if %q == 0 {
n1175=            if %p == 2 {
n1176=              var %m ld (.imm16[]),.regi[]
n1177=            }
n1178=          }
n1179=          else {
n1180=            if %p == 2 {
n1181=              var %m ld .regi[],(.imm16[])
n1182=            }
n1183=          }
n1184=        }
n1185=        elseif %z == 3 {
n1186=          if %q == 0 {
n1187=            if %p == 2 {
n1188=              var %m inc .regi[]
n1189=            }
n1190=          }
n1191=          else {
n1192=            if %p == 2 {
n1193=              var %m dec .regi[]
n1194=            }
n1195=          }
n1196=        }
n1197=        elseif %z == 4 {
n1198=          if (%y == 4) || (%y == 5) {
n1199=            var %m inc .regi8[%y]
n1200=          }
n1201=          elseif %y == 6 {
n1202=            var %m inc (.regiofs8[])
n1203=          }
n1204=        }
n1205=        elseif %z == 5 {
n1206=          if (%y == 4) || (%y == 5) {
n1207=            var %m dec .regi8[%y]
n1208=          }
n1209=          elseif %y == 6 {
n1210=            var %m dec (.regiofs8[])
n1211=          }
n1212=        }
n1213=        elseif %z == 6 {
n1214=          if (%y == 4) || (%y == 5) {
n1215=            var %m ld .regi8[%y],.imm8[]
n1216=          }
n1217=          elseif %y == 6 {
n1218=            var %m ld (.regiofs8[]),.imm8[]
n1219=          }
n1220=          elseif %ez80 && %y == 7 {
n1221=            var %m ld (.regiofs8[]),.regiopp[]
n1222=          }
n1223=        }
n1224=        elseif %ez80 && %z == 7 {
n1225=          var %reg16 $iif(%p != 3,.reg16[%p],.regi[])
n1226=          if %q == 0 {
n1227=            var %m ld %reg16 $+ ,(.regiofs8[])
n1228=          }
n1229=          else {
n1230=            var %m ld (.regiofs8[]), $+ %reg16
n1231=          }
n1232=        }
n1233=      }
n1234=      elseif %x == 1 {
n1235=        if (%z == 6) && (%y == 6) {
n1236=          ;intentionally left blank
n1237=        }
n1238=        elseif %z == 6 {
n1239=          var %m ld .reg8[%y],(.regiofs8[])
n1240=        }
n1241=        elseif %y == 6 {
n1242=          var %m ld (.regiofs8[]),.reg8[%z]
n1243=        }
n1244=        elseif (%z == 4) || (%z == 5) {
n1245=          var %m ld .reg8i[%y],.regi8[%z]
n1246=        }
n1247=        elseif (%y == 4) || (%y == 5) {
n1248=          var %m ld .regi8[%y],.reg8i[%z]
n1249=        }
n1250=      }
n1251=      elseif %x == 2 {
n1252=        if (%z == 4) || (%z == 5) {
n1253=          var %m .alu[%y].regi8[%z]
n1254=        }
n1255=        elseif %z == 6 {
n1256=          var %m .alu[%y](.regiofs8[])
n1257=        }
n1258=      }
n1259=      else {
n1260=        if %z == 1 {
n1261=          if %q == 0 {
n1262=            if %p == 2 {
n1263=              var %m pop .regi[]
n1264=            }
n1265=          }
n1266=          else {
n1267=            if %p == 2 {
n1268=              var %m jp (.reg16i[2;1])
n1269=            }
n1270=            elseif %p == 3 {
n1271=              var %m ld .reg16i[3;1],.reg16i[2;1]
n1272=            }
n1273=          }
n1274=        }
n1275=        elseif %z == 3 {
n1276=          if %y == 1 {
n1277=            set %omni.z80.d.prefix %omni.z80.d.prefix $+ %omni.z80.d.byte
n1278=          }
n1279=          elseif %y == 4 {
n1280=            var %m ex (.reg16i[3;1]),.reg16i[2;1]
n1281=          }
n1282=        }
n1283=        elseif %z == 5 {
n1284=          if %q == 0 {
n1285=            if %p == 2 {
n1286=              var %m push .regi[]
n1287=            }
n1288=          }
n1289=        }
n1290=      }
n1291=      if (%m == $null) && (%omni.z80.d.byte != CB) {
n1292=        if %ez80 {
n1293=          var %m trap
n1294=        }
n1295=        else {
n1296=          dec %omni.z80.d.pos 2
n1297=          set %omni.z80.d.hex $left(%omni.z80.d.hex,2)
n1298=          omni.z80.d.write .db .byte[%omni.z80.d.hex]
n1299=        }
n1300=      }
n1301=    }
n1302=    elseif $len(%omni.z80.d.hex) == 8 {
n1303=      if %x == 0 {
n1304=        if %z == 6 {
n1305=          var %m .rot[%y](.regiofs8[])
n1306=        }
n1307=        elseif !%ez80 {
n1308=          var %m .rot[%y](.regiofs8[]),.reg8[%z]
n1309=        }
n1310=      }
n1311=      elseif %x == 1 {
n1312=        if %z == 6 || !%ez80 {
n1313=          var %m bit .imm3[%y],(.regiofs8[])
n1314=        }
n1315=      }
n1316=      elseif %x == 2 {
n1317=        if %z == 6 {
n1318=          var %m res .imm3[%y],(.regiofs8[])
n1319=        }
n1320=        elseif !%ez80 {
n1321=          var %m res .imm3[%y],(.regiofs8[]),.reg8[%z]
n1322=        }
n1323=      }
n1324=      else {
n1325=        if %z == 6 {
n1326=          var %m set .imm3[%y],(.regiofs8[])
n1327=        }
n1328=        elseif !%ez80 {
n1329=          var %m set .imm3[%y],(.regiofs8[]),.reg8[%z]
n1330=        }
n1331=      }
n1332=      if %m == $null {
n1333=        var %m trap
n1334=      }
n1335=      else {
n1336=        var %m %m $+ .dummy[]
n1337=        dec %omni.z80.d.pos 4
n1338=        set %omni.z80.d.hex $left(%omni.z80.d.hex,-4)
n1339=      }
n1340=    }
n1341=    if %m != $null {
n1342=      var %error $omni.z80.d.write(%m)
n1343=    }
n1344=  }
n1345=  unset %omni.z80.d.suffix
n1346=  set %omni.z80.d.byte 00
n1347=  var %hex %omni.z80.d.hex
n1348=  while %hex != $null {
n1349=    set %omni.z80.d.hex $left(%hex,2)
n1350=    omni.z80.d.write .db .imm8[h;%omni.z80.d.hex]
n1351=    var %hex $right(%hex,-2)
n1352=  }
n1353=  var %str %omni.z80.d.str
n1354=  unset %omni.z80.d.* %x %y %z %p %q
n1355=  .fclose omni.z80.d.*
n1356=  return $left(%str,- $+ $len($omni.asmdivider))
n1357=}
n1358=/omni.z80.d.bytefeed {
n1359=  set %omni.z80.d.byte $mid(%omni.z80.d.input,%omni.z80.d.pos,2)
n1360=  set %omni.z80.d.hex %omni.z80.d.hex $+ %omni.z80.d.byte
n1361=  set %omni.z80.d.bin $base(%omni.z80.d.byte,16,2,8)
n1362=  inc %omni.z80.d.pos 2
n1363=  return %omni.z80.d.byte
n1364=}
n1365=/omni.z80.d.write {
n1366=  var %m $omni.z80.mparse($1-)
n1367=  if %m == error {
n1368=    return %m
n1369=  }
n1370=  set %omni.z80.d.str %omni.z80.d.str %m $omni.asmdivider
n1371=  inc %omni.z80.d.ops
n1372=  .fwrite -n omni.z80.d.file $chr(9) $+ $strip(%m)
n1373=  .fwrite -n omni.z80.d.hexfile %omni.z80.d.hex
n1374=  unset %omni.z80.d.hex
n1375=  unset %omni.z80.d.index
n1376=  unset %omni.z80.d.prefix
n1377=  unset %omni.z80.d.suffix
n1378=}
n1379=/omni.z80.mparse {
n1380=  var %m $1
n1381=  if ($left(%m,1) == .) && ([ !isin $gettok(%m,1,32)) {
n1382=    var %m $omni.z80.color.def $+ ~ $+ $right(%m,-1)
n1383=  }
n1384=  elseif %omni.z80.d.true {
n1385=    var %m $omni.z80.color.op $+ %m $+ $omni.z80.color.punct
n1386=  }
n1387=  var %immword 0
n1388=  while . isin %m {
n1389=    unset %omni.z80.d.color
n1390=    var %p1 $pos(%m,.,1)
n1391=    if $mid(%m,$calc(%p1 + 1),1) isalnum {
n1392=      var %p2 $pos($left(%m,%p1),$chr(93),0)
n1393=      var %p2 $pos(%m,$chr(93),$calc(%p2 + 1))
n1394=      var %sym $mid(%m,%p1,$calc(%p2 - %p1 + 1))
n1395=      if .imm16* iswm %sym {
n1396=        var %immword 1
n1397=      }
n1398=      var %replace $(,$replace($+($,omni.z80.sym,%sym),[,$chr(40),],$chr(41),;,$chr(44))) $+ $omni.z80.color.punct
n1399=      if !%omni.z80.d.general && (%omni.z80.d.byte == $null) {
n1400=        return error
n1401=      }
n1402=    }
n1403=    else {
n1404=      var %p2 %p1
n1405=      var %replace ~
n1406=    }
n1407=    var %m $left(%m,$calc(%p1 - 1)) $+ %omni.z80.d.color $+ $replace(%replace,$chr(160),$chr(32)) $+ $right(%m,- $+ %p2)
n1408=  }
n1409=  var %m $replace(%m,~,.,$chr(160),$chr(32),$omni.z80.color.punct $+ ,)
n1410=  var %suffix $iif(!%omni.z80.d.general,$gettok($iif(%omni.z80.d.adl,.sis .is $iif(%immword,.sil,.s) .lil,.sis $iif(%immword,.lis,.l) .il .lil),$findtok(40 49 52 5B,%omni.z80.d.suffix,32),32))
n1411=  var %m $gettok(%m,1,32) $+ %suffix $gettok(%m,2-,32)
n1412=  return %m
n1413=}
n1414=/omni.z80.sym.bcall {
n1415=  set %omni.z80.d.color $omni.z80.color.imm
n1416=  var %byte $omni.z80.d.bytefeed
n1417=  var %addr $omni.z80.d.bytefeed $+ %byte $+ h
n1418=  if %omni.z80.d.general && !$2 {
n1419=    return imm16
n1420=  }
n1421=  var %inc $omni.file($gettok($omni.z80.includes(%omni.z80.d.model),1,32),z80)
n1422=  var %r $read(%inc,ntw,*equ %addr $+ *)
n1423=  if %r == $null {
n1424=    var %r $read(%inc,ntw,$+(*equ,$chr(9),%addr,*))
n1425=  }
n1426=  if $left(%r,1) != _ {
n1427=    return %addr
n1428=  }
n1429=  set %omni.z80.d.color $omni.z80.color.bcall
n1430=  return $gettok(%r,1,9)
n1431=}
n1432=/omni.z80.sym.imm3 {
n1433=  set %omni.z80.d.color $omni.z80.color.imm
n1434=  if %omni.z80.d.general && !$2 {
n1435=    return imm3
n1436=  }
n1437=  return $1
n1438=}
n1439=/omni.z80.sym.zero {
n1440=  set %omni.z80.d.color $omni.z80.color.imm
n1441=  return 0
n1442=}
n1443=/omni.z80.sym.byte {
n1444=  set %omni.z80.d.color $omni.z80.color.imm
n1445=  if %omni.z80.d.general && !$2 {
n1446=    return imm8
n1447=  }
n1448=  return $iif($3 == b,% $+ $base($1,16,2,8),$iif($3 == d,$base($1,16,10),$ $+ $1))
n1449=}
n1450=/omni.z80.sym.dummy {
n1451=  omni.z80.d.bytefeed
n1452=  return
n1453=}
n1454=/omni.z80.sym.punct {
n1455=  set %omni.z80.d.color $omni.z80.color.punct
n1456=  return $1
n1457=}
n1458=/omni.z80.sym.ofs8 {
n1459=  set %omni.z80.d.color $omni.z80.color.imm
n1460=  var %dec $base($omni.z80.d.bytefeed,16,10)
n1461=  if %omni.z80.d.general && !$2 {
n1462=    return ofs8
n1463=  }
n1464=  return $iif(%dec <= 127,+ $+ %dec,$calc(%dec - 256))
n1465=}
n1466=/omni.z80.sym.ofs8pc {
n1467=  set %omni.z80.d.color $omni.z80.color.imm
n1468=  var %dec $calc(($base($omni.z80.d.bytefeed,16,10) + 2) % 256)
n1469=  if %omni.z80.d.general && !$2 {
n1470=    return ofs8
n1471=  }
n1472=  return $ $+ $iif(%dec <= 129,+ $+ %dec,$calc(%dec - 256))
n1473=}
n1474=/omni.z80.sym.imm8 {
n1475=  set %omni.z80.d.color $omni.z80.color.imm
n1476=  if $2 == $null {
n1477=    var %a $omni.z80.d.bytefeed
n1478=  }
n1479=  else {
n1480=    var %a $2
n1481=  }
n1482=  if %omni.z80.d.general && !$3 {
n1483=    return imm8
n1484=  }
n1485=  return $iif($1 == b,% $+ $base(%a,16,2,8),$iif($1 == d,$base(%a,16,10),$ $+ %a))
n1486=}
n1487=/omni.z80.sym.imm16 {
n1488=  set %omni.z80.d.color $omni.z80.color.imm
n1489=  var %suffix %omni.z80.d.suffix
n1490=  var %bits $iif(%suffix == 52 || %suffix == 5B || (%omni.z80.d.adl && %suffix != 40 && %suffix != 49),24,16)
n1491=  if $2 == $null {
n1492=    var %a $omni.z80.d.bytefeed
n1493=    var %a $omni.z80.d.bytefeed $+ %a
n1494=    if %bits == 24 {
n1495=      var %a $omni.z80.d.bytefeed $+ %a
n1496=    }
n1497=  }
n1498=  else {
n1499=    var %a $2
n1500=  }
n1501=  if %omni.z80.d.general && !$3 {
n1502=    return imm $+ $iif(%omni.z80.d.generalsuffix,$iif(%omni.z80.d.ez80,24,16),%bits)
n1503=  }
n1504=  if $1 == b {
n1505=    return % $+ $base(%a,16,%bits)
n1506=  }
n1507=  if $1 == d {
n1508=    return $base(%a,16,10)
n1509=  }
n1510=  return $ $+ %a
n1511=}
n1512=/omni.z80.sym.imm24 {
n1513=  return $omni.z80.sym.imm16($1,$2,$3)
n1514=}
n1515=/omni.z80.sym.dec2h {
n1516=  set %omni.z80.d.color $omni.z80.color.imm
n1517=  if %omni.z80.d.general && !$2 {
n1518=    return imm8
n1519=  }
n1520=  return $base($1,10,16,2) $+ h
n1521=}
n1522=/omni.z80.sym.iff1 {
n1523=  set %omni.z80.d.color $omni.z80.color.reg
n1524=  return IFF1
n1525=}
n1526=/omni.z80.sym.iff2 {
n1527=  set %omni.z80.d.color $omni.z80.color.reg
n1528=  return IFF2
n1529=}
n1530=/omni.z80.sym.reg8 {
n1531=  set %omni.z80.d.color $omni.z80.color.reg
n1532=  if %omni.z80.d.general && !$2 {
n1533=    return reg8
n1534=  }
n1535=  return $gettok(b_c_d_e_h_l_(hl)_a,$calc($1 + 1),95)
n1536=}
n1537=/omni.z80.sym.reg8i {
n1538=  set %omni.z80.d.color $omni.z80.color.reg
n1539=  if %omni.z80.d.general && !$2 {
n1540=    return reg8
n1541=  }
n1542=  return $gettok($+(b_c_d_e_,%omni.z80.d.index,h_,%omni.z80.d.index,l_!_a),$calc($1 + 1),95)
n1543=}
n1544=/omni.z80.sym.regi8 {
n1545=  set %omni.z80.d.color $omni.z80.color.reg
n1546=  if %omni.z80.d.general && !$2 {
n1547=    return reg8index
n1548=  }
n1549=  return $gettok($+(!_!_!_!_,%omni.z80.d.index,h_,%omni.z80.d.index,l_!_!),$calc($1 + 1),95)
n1550=}
n1551=/omni.z80.sym.regiofs8 {
n1552=  return $+(.regi[,$1,],$iif(%omni.z80.d.general,.punct[+]),.ofs8[])
n1553=}
n1554=/omni.z80.sym.reg8ir {
n1555=  set %omni.z80.d.color $omni.z80.color.reg
n1556=  if %omni.z80.d.general && !$2 {
n1557=    return $chr(123) i $chr(124) r $chr(125)
n1558=  }
n1559=  return $gettok(i_r,$calc($1 + 1),95)
n1560=}
n1561=/omni.z80.sym.regmb {
n1562=  set %omni.z80.d.color $omni.z80.color.reg
n1563=  return mb
n1564=}
n1565=/omni.z80.sym.reglsb {
n1566=  set %omni.z80.d.color $omni.z80.color.reg
n1567=  return regLSB
n1568=}
n1569=/omni.z80.sym.regmsb {
n1570=  set %omni.z80.d.color $omni.z80.color.reg
n1571=  return regMSB
n1572=}
n1573=/omni.z80.sym.reg16 {
n1574=  set %omni.z80.d.color $omni.z80.color.reg
n1575=  if %omni.z80.d.general && !$2 {
n1576=    var %suffix %omni.z80.d.suffix
n1577=    return reg $+ $iif($iif(%omni.z80.d.generalsuffix,%omni.z80.d.ez80,$iif(%suffix == 49 || %suffix == 5B || (%omni.z80.d.adl && %suffix != 40 && %suffix != 52),1,0)),24,16)
n1578=  }
n1579=  return $gettok(bc_de_hl_sp,$calc($1 + 1),95)
n1580=}
n1581=/omni.z80.sym.reg24 {
n1582=  return $omni.z80.sym.reg16($1,$2)
n1583=}
n1584=/omni.z80.sym.reg16af {
n1585=  set %omni.z80.d.color $omni.z80.color.reg
n1586=  if %omni.z80.d.general && !$2 {
n1587=    return $omni.z80.sym.reg16($1,$2)
n1588=  }
n1589=  return $gettok(bc_de_hl_af,$calc($1 + 1),95)
n1590=}
n1591=/omni.z80.sym.reg24af {
n1592=  return $omni.z80.sym.reg16af($1,$2)
n1593=}
n1594=/omni.z80.sym.reg16sh {
n1595=  set %omni.z80.d.color $omni.z80.color.reg
n1596=  if %omni.z80.d.general && !$2 {
n1597=    return $omni.z80.sym.reg16($1,$2)
n1598=  }
n1599=  return $gettok(bc'_de'_hl'_af',$calc($1 + 1),95)
n1600=}
n1601=/omni.z80.sym.reg24sh {
n1602=  return $omni.z80.sym.reg16sh($1,$2)
n1603=}
n1604=/omni.z80.sym.reg16i {
n1605=  set %omni.z80.d.color $omni.z80.color.reg
n1606=  if %omni.z80.d.general && !$2 {
n1607=    return $omni.z80.sym.reg16($1,$2)
n1608=  }
n1609=  return $gettok(bc_de_ $+ %omni.z80.d.index $+ _sp,$calc($1 + 1),95)
n1610=}
n1611=/omni.z80.sym.reg24i {
n1612=  return $omni.z80.sym.reg16i($1,$2)
n1613=}
n1614=/omni.z80.sym.regi {
n1615=  set %omni.z80.d.color $omni.z80.color.reg
n1616=  if $1 != $null {
n1617=    return $iif($1,iy,ix)
n1618=  }
n1619=  return %omni.z80.d.index
n1620=}
n1621=/omni.z80.sym.regiopp {
n1622=  set %omni.z80.d.color $omni.z80.color.reg
n1623=  return $iif(%omni.z80.d.index == ix,iy,ix)
n1624=}
n1625=/omni.z80.sym.regpc {
n1626=  set %omni.z80.d.color $omni.z80.color.reg
n1627=  return pc
n1628=}
n1629=/omni.z80.sym.cc {
n1630=  set %omni.z80.d.color $omni.z80.color.flag
n1631=  if %omni.z80.d.general && !$2 {
n1632=    return cc
n1633=  }
n1634=  return $gettok(nz_z_nc_c_po_pe_p_m,$calc($1 + 1),95)
n1635=}
n1636=/omni.z80.sym.alu {
n1637=  var %acomma .reg8[7;1] $+ $chr(44)
n1638=  var %acommamaybe $chr(160) $+ $iif(%omni.z80.d.ez80,%acomma,)
n1639=  return $gettok(add %acomma $+ _adc %acomma $+ _sub $+ %acommamaybe $+ _sbc %acomma $+ _and $+ %acommamaybe $+ _xor $+ %acommamaybe $+ _or $+ %acommamaybe $+ _cp $+ %acommamaybe,$calc($1 + 1),95)
n1640=}
n1641=/omni.z80.sym.rot {
n1642=  return $gettok(rlc $+ $chr(160) $+ _rrc $+ $chr(160) $+ _rl $+ $chr(160) $+ _rr $+ $chr(160) $+ _sla $+ $chr(160) $+ _sra $+ $chr(160) $+ _sll $+ $chr(160) $+ _srl $+ $chr(160),$calc($1 + 1),95)
n1643=}
n1644=/omni.z80.sym.im {
n1645=  set %omni.z80.d.color $omni.z80.color.imm
n1646=  return $gettok(0_0/1_1_2_0_0/1_1_2,$calc($1 + 1),95)
n1647=}
n1648=/omni.z80.a {
n1649=  var %input $1
n1650=  var %model $2
n1651=  var %class $3
n1652=  var %ez80 $iif(%class == ez80,1,0)
n1653=  var %adl %ez80
n1654=  var %hex
n1655=  .fclose omni.z80.a.*
n1656=  .fopen -o omni.z80.a.file $omni.file(assembly.txt,%class)
n1657=  .fopen -o omni.z80.a.hexfile $omni.file(assemblyhex.txt,%class)
n1658=  while %input != $null {
n1659=    var %bin
n1660=    var %prefix
n1661=    var %suffix
n1662=    var %m $replace($gettok($gettok(%input,1,$asc($strip($omni.asmdivider))),1-,32),$chr(9),$chr(32))
n1663=    var %mns %m
n1664=    var %input $gettok($gettok(%input,2-,$asc($strip($omni.asmdivider))),1-,32)
n1665=    if ,, isin %m {
n1666=      goto error
n1667=    }
n1668=    var %m1 $gettok(%m,1,32)
n1669=    if %ez80 {
n1670=      var %ms
n1671=      var %ms1
n1672=      var %ms2
n1673=      if $regex(%m,/^([^ .]+)\.([^ .]+)(.*)/) {
n1674=        var %m1 $regml(1)
n1675=        var %ms $regml(2)
n1676=        var %mns $regml(1) $+ $regml(3)
n1677=        var %ms1 $iif(%adl,l,s)
n1678=        var %ms2 $iif(%adl,il,is)
n1679=        if $regex(%ms,/^([sl])$/i) {
n1680=          var %ms1 $regml(1)
n1681=        }
n1682=        elseif $regex(%ms,/^(i[sl])$/i) {
n1683=          var %ms2 $regml(1)
n1684=        }
n1685=        elseif $regex(%ms,/^([sl])(i[sl])$/i) {
n1686=          var %ms1 $regml(1)
n1687=          var %ms2 $regml(2)
n1688=        }
n1689=        else {
n1690=          goto error
n1691=        }
n1692=        var %ms %ms1 $+ %ms2
n1693=        var %suffix $gettok(01000000 01001001 01010010 01011011,$findtok(sis lis sil lil,%ms,32),32)
n1694=      }
n1695=    }
n1696=    var %wordbits $iif(%ms2 == il || (%adl && %ms2 != is),24,16)
n1697=    var %m2.1- $gettok(%m,2-,32)
n1698=    if ($left(%m2.1-,1) == ,) || ($right(%m2.1-,1) == ,) {
n1699=      goto error
n1700=    }
n1701=    var %m2.1 $gettok($gettok(%m2.1-,1,44),1-,32)
n1702=    var %m2.2- $gettok($gettok(%m2.1-,2-,44),1-,32)
n1703=    var %m2.2 $gettok($gettok(%m2.1-,2,44),1-,32)
n1704=    var %m2.3 $gettok($gettok(%m2.1-,3-,44),1-,32)
n1705=    if .* iswm %m1 {
n1706=      if %ms != $null {
n1707=        goto error
n1708=      }
n1709=      var %databits $calc($findtok(.db .dw $iif(%ez80,.dl),%m1,32) * 8)
n1710=      if %databits {
n1711=        if %m2.1- == $null {
n1712=          goto error
n1713=        }
n1714=        while %m2.1 != $null {
n1715=          var %noqt $noqt(%m2.1)
n1716=          if $qt(%noqt) == %m2.1 {
n1717=            while %noqt != $null {
n1718=              var %bin %bin $+ $base($asc($left(%noqt,1)),10,2,8)
n1719=              var %noqt $right(%noqt,-1)
n1720=            }
n1721=          }
n1722=          else {
n1723=            var %a $left($omni.z80.a.calc(%m2.1,%model,2,%wordbits),%databits)
n1724=            if %a == $null {
n1725=              goto error
n1726=            }
n1727=            var %bin %bin $+ %a
n1728=          }
n1729=          var %m2.1- $gettok(%m2.1-,2-,44)
n1730=          var %m2.1 $gettok(%m2.1-,1,44)
n1731=        }
n1732=        goto end
n1733=      }
n1734=    }
n1735=    if !%ez80 && (($left(%m,6) == B_CALL) || ($left(%m,5) == bcall)) {
n1736=      var %pos $iif($left(%m,6) == B_CALL,7,6)
n1737=      if ($mid(%m,%pos,1) == $chr(40)) && ($right(%m,1) == $chr(41)) {
n1738=        var %bcall $left($right(%m,- $+ %pos),-1)
n1739=      }
n1740=      elseif $mid(%m,%pos,1) == $chr(32) {
n1741=        var %bcall $right(%m,- $+ %pos)
n1742=      }
n1743=      else {
n1744=        goto error
n1745=      }
n1746=      var %a $omni.z80.a.imm16(%bcall,%model,%wordbits)
n1747=      if %a != $null {
n1748=        var %bin 11101111 $+ %a
n1749=        goto end
n1750=      }
n1751=    }
n1752=    if %mns == nop {
n1753=      var %bin 00000000
n1754=      goto end
n1755=    }
n1756=    if %m1 == ex {
n1757=      if (%m2.1 == af) && (%m2.2- == af') {
n1758=        var %bin 00001000
n1759=        goto end
n1760=      }
n1761=      if (%m2.1 == (sp)) && $omni.z80.a.ishlixiy(%m2.2-) {
n1762=        var %prefix $omni.z80.a.reg16prefix(%m2.2-)
n1763=        var %bin 11100011
n1764=        goto end
n1765=      }
n1766=      if (%m2.1 == de) && (%m2.2- == hl) {
n1767=        var %bin 11101011
n1768=        goto end
n1769=      }
n1770=    }
n1771=    if %m1 == djnz {
n1772=      var %a $omni.z80.a.ofs8pc(%m2.1-,%model)
n1773=      if %a != $null {
n1774=        var %bin 00010000 $+ %a
n1775=        goto end
n1776=      }
n1777=    }
n1778=    if %m1 == jr {
n1779=      var %a $omni.z80.a.ofs8pc(%m2.1-,%model)
n1780=      if %a != $null {
n1781=        var %bin 00011000 $+ %a
n1782=        goto end
n1783=      }
n1784=      var %a $omni.z80.a.ccjr(%m2.1)
n1785=      if %a != $null {
n1786=        var %b $omni.z80.a.ofs8pc(%m2.2-,%model)
n1787=        if %b != $null {
n1788=          var %bin 00 $+ %a $+ 000 $+ %b
n1789=          goto end
n1790=        }
n1791=      }
n1792=    }
n1793=    if %m1 == ld {
n1794=      var %a $omni.z80.a.reg16(%m2.1)
n1795=      if %a != $null {
n1796=        var %p $omni.z80.a.reg16prefix(%m2.1)
n1797=        var %ptr $omni.z80.a.ptr(%m2.2-)
n1798=        var %b $omni.z80.a.imm16(%ptr,%model,%wordbits)
n1799=        if %b != $null {
n1800=          var %prefix %p
n1801=          if $omni.z80.a.ishlixiy(%m2.1) {
n1802=            var %bin 00101010 $+ %b
n1803=          }
n1804=          else {
n1805=            var %bin 1110110101 $+ %a $+ 1011 $+ %b
n1806=          }
n1807=          goto end
n1808=        }
n1809=        var %b $omni.z80.a.imm16(%m2.2-,%model,%wordbits)
n1810=        if %b != $null {
n1811=          var %prefix %p
n1812=          var %bin 00 $+ %a $+ 0001 $+ %b
n1813=          goto end
n1814=        }
n1815=        elseif %ez80 {
n1816=          if %m2.2- == (hl) {
n1817=            var %a $omni.z80.a.reg16e(%m2.1,11011101)
n1818=            if %a == 100 {
n1819=              var %bin 1110110100110001
n1820=              goto end
n1821=            }
n1822=            var %bin 1110110100 $+ %a $+ 0111
n1823=            goto end
n1824=          }
n1825=          var %x $omni.z80.a.regiofs8(%m2.2-,%model)
n1826=          var %p2 $gettok(%x,1,32)
n1827=          var %b $gettok(%x,2,32)
n1828=          if %b != $null {
n1829=            var %a $omni.z80.a.reg16e(%m2.1,%p2)
n1830=            var %prefix %p2
n1831=            if %a == 100 {
n1832=              var %bin 00110001 $+ %b
n1833=              goto end
n1834=            }
n1835=            var %bin 00 $+ %a $+ 0111 $+ %b
n1836=            goto end
n1837=          }
n1838=        }
n1839=      }
n1840=      if %m2.1 == sp {
n1841=        if $omni.z80.a.ishlixiy(%m2.2-) {
n1842=          var %prefix $omni.z80.a.reg16prefix(%m2.2-)
n1843=          var %bin 11111001
n1844=          goto end
n1845=        }
n1846=      }
n1847=      if %m2.1 == (bc) {
n1848=        if %m2.2- == a {
n1849=          var %bin 00000010
n1850=          goto end
n1851=        }
n1852=      }
n1853=      if %m2.1 == (de) {
n1854=        if %m2.2- == a {
n1855=          var %bin 00010010
n1856=          goto end
n1857=        }
n1858=      }
n1859=      var %ptr $omni.z80.a.ptr(%m2.1)
n1860=      if %ptr != $null {
n1861=        var %a $omni.z80.a.imm16(%ptr,%model,%wordbits)
n1862=        if %a != $null {
n1863=          var %p $omni.z80.a.reg16prefix(%m2.2-)
n1864=          var %b $omni.z80.a.reg16(%m2.2-)
n1865=          if %b != $null {
n1866=            var %prefix %p
n1867=            if $omni.z80.a.ishlixiy(%m2.2-) {
n1868=              var %bin 00100010 $+ %a
n1869=            }
n1870=            else {
n1871=              var %bin 1110110101 $+ %b $+ 0011 $+ %a
n1872=            }
n1873=            goto end
n1874=          }
n1875=          if %m2.2- == a {
n1876=            var %bin 00110010 $+ %a
n1877=            goto end
n1878=          }
n1879=        }
n1880=      }
n1881=      if %m2.1 == a {
n1882=        if %m2.2- == (bc) {
n1883=          var %bin 00001010
n1884=          goto end
n1885=        }
n1886=        if %m2.2- == (de) {
n1887=          var %bin 00011010
n1888=          goto end
n1889=        }
n1890=        var %ptr $omni.z80.a.ptr(%m2.2-)
n1891=        if %ptr != $null {
n1892=          var %a $omni.z80.a.imm16(%ptr,%model,%wordbits)
n1893=          if %a != $null {
n1894=            var %bin 00111010 $+ %a
n1895=            goto end
n1896=          }
n1897=        }
n1898=        if %m2.2- == i {
n1899=          var %bin 1110110101010111
n1900=          goto end
n1901=        }
n1902=        if %m2.2- == r {
n1903=          var %bin 1110110101011111
n1904=          goto end
n1905=        }
n1906=        if %ez80 && (%m2.2- == mb) {
n1907=          var %bin 1110110101101110
n1908=          goto end
n1909=        }
n1910=      }
n1911=      var %a $omni.z80.a.reg8(%m2.1)
n1912=      if %a != $null {
n1913=        var %p $omni.z80.a.reg8prefix(%m2.1)
n1914=        var %b $omni.z80.a.imm8(%m2.2-,%model)
n1915=        if %b != $null {
n1916=          var %prefix %p
n1917=          var %bin 00 $+ %a $+ 110 $+ %b
n1918=          goto end
n1919=        }
n1920=        var %b $omni.z80.a.reg8(%m2.2-)
n1921=        if (%b != $null) && ((%a != %b) || !$istok($iif(%ez80,b c d e) $chr(40) $+ hl $+ $chr(41),%m2.1,32)) {
n1922=          var %p2 $omni.z80.a.reg8prefix(%m2.2-)
n1923=          if $istok(100 101,%a,32) && $istok(100 101,%b,32) && (%p != %p2) {
n1924=            goto error
n1925=          }
n1926=          if %p != $null {
n1927=            if (%p2 != $null) && (%p != %p2) {
n1928=              goto error
n1929=            }
n1930=            if %m2.2- == (hl) {
n1931=              goto error
n1932=            }
n1933=            var %prefix %p
n1934=          }
n1935=          elseif %p2 != $null {
n1936=            if %m2.1 == (hl) {
n1937=              goto error
n1938=            }
n1939=            var %prefix %p2
n1940=          }
n1941=          var %bin 01 $+ %a $+ %b
n1942=          goto end
n1943=        }
n1944=        if (%m2.1 != (hl)) && (%p == $null) {
n1945=          var %x $omni.z80.a.regiofs8(%m2.2-,%model)
n1946=          var %p2 $gettok(%x,1,32)
n1947=          var %b $gettok(%x,2-,32)
n1948=          if %b != $null {
n1949=            var %prefix %p2
n1950=            var %bin 01 $+ %a $+ 110 $+ %b
n1951=            goto end
n1952=          }
n1953=        }
n1954=      }
n1955=      var %x $omni.z80.a.regiofs8(%m2.1,%model)
n1956=      var %p $gettok(%x,1,32)
n1957=      var %a $gettok(%x,2-,32)
n1958=      if %a != $null {
n1959=        var %b $omni.z80.a.imm8(%m2.2-,%model)
n1960=        if %b != $null {
n1961=          var %prefix %p
n1962=          var %bin 00110110 $+ %a $+ %b
n1963=          goto end
n1964=        }
n1965=        var %b $omni.z80.a.reg8nohl(%m2.2-,0)
n1966=        if %b != $null {
n1967=          var %prefix %p
n1968=          var %bin 01110 $+ %b $+ %a
n1969=          goto end
n1970=        }
n1971=        var %b $omni.z80.a.reg16e(%m2.2-,%p)
n1972=        if %b != $null {
n1973=          var %prefix %p
n1974=          if %b == 100 {
n1975=            var %bin 00111110 $+ %a
n1976=            goto end
n1977=          }
n1978=          var %bin 00 $+ %b $+ 1111 $+ %a
n1979=          goto end
n1980=        }
n1981=      }
n1982=      if %m2.1 == i {
n1983=        if %m2.2- == a {
n1984=          var %bin 1110110101000111
n1985=          goto end
n1986=        }
n1987=        if %ez80 && %m2.2- == hl {
n1988=          var %bin 1110110111000111
n1989=          goto end
n1990=        }
n1991=      }
n1992=      if %m2.1 == r {
n1993=        if %m2.2- == a {
n1994=          var %bin 1110110101001111
n1995=          goto end
n1996=        }
n1997=      }
n1998=      if %ez80 {
n1999=        if %m2.1 == (hl) {
n2000=          var %b $omni.z80.a.reg16e(%m2.2-)
n2001=          if %b != $null {
n2002=            if %b == 100 {
n2003=              var %bin 1110110100111110
n2004=              goto end
n2005=            }
n2006=            var %bin 1110110100 $+ %b $+ 1111
n2007=            goto end
n2008=          }
n2009=        }
n2010=        if %m2.1 == mb {
n2011=          if %m2.2- == a {
n2012=            var %bin 1110110101101101
n2013=            goto end
n2014=          }
n2015=        }
n2016=        if %m2.1 == hl {
n2017=          if %m2.2- == i {
n2018=            var %bin 1110110111010111
n2019=            goto end
n2020=          }
n2021=        }
n2022=      }
n2023=    }
n2024=    if %m1 == add {
n2025=      var %p $omni.z80.a.reg16prefix(%m2.1)
n2026=      if $omni.z80.a.ishlixiy(%m2.1) {
n2027=        var %b $omni.z80.a.reg16(%m2.2-)
n2028=        if %b != $null {
n2029=          var %p2 $omni.z80.a.reg16prefix(%m2.2-)
n2030=          if (%p2 != $null) && (%p != %p2) {
n2031=            goto error
n2032=          }
n2033=          var %prefix %p
n2034=          var %bin 00 $+ %b $+ 1001
n2035=          goto end
n2036=        }
n2037=      }
n2038=      var %a $omni.z80.a.imm8(%m2.1-,%model)
n2039=      if %a != $null {
n2040=        var %bin 11000110 $+ %a
n2041=        goto end
n2042=      }
n2043=    }
n2044=    if %m1 == inc {
n2045=      var %a $omni.z80.a.reg16(%m2.1-)
n2046=      if %a != $null {
n2047=        var %prefix $omni.z80.a.reg16prefix(%m2.1-)
n2048=        var %bin 00 $+ %a $+ 0011
n2049=        goto end
n2050=      }
n2051=      var %a $omni.z80.a.reg8(%m2.1-)
n2052=      if %a != $null {
n2053=        var %prefix $omni.z80.a.reg8prefix(%m2.1-)
n2054=        var %bin 00 $+ %a $+ 100
n2055=        goto end
n2056=      }
n2057=      var %x $omni.z80.a.regiofs8(%m2.1,%model)
n2058=      var %p $gettok(%x,1,32)
n2059=      var %a $gettok(%x,2-,32)
n2060=      if %a != $null {
n2061=        var %prefix %p
n2062=        var %bin 00110100 $+ %a
n2063=        goto end
n2064=      }
n2065=    }
n2066=    if %m1 == dec {
n2067=      var %a $omni.z80.a.reg16(%m2.1-)
n2068=      if %a != $null {
n2069=        var %prefix $omni.z80.a.reg16prefix(%m2.1-)
n2070=        var %bin 00 $+ %a $+ 1011
n2071=        goto end
n2072=      }
n2073=      var %a $omni.z80.a.reg8(%m2.1-)
n2074=      if %a != $null {
n2075=        var %prefix $omni.z80.a.reg8prefix(%m2.1-)
n2076=        var %bin 00 $+ %a $+ 101
n2077=        goto end
n2078=      }
n2079=      var %x $omni.z80.a.regiofs8(%m2.1,%model)
n2080=      var %p $gettok(%x,1,32)
n2081=      var %a $gettok(%x,2-,32)
n2082=      if %a != $null {
n2083=        var %prefix %p
n2084=        var %bin 00110101 $+ %a
n2085=        goto end
n2086=      }
n2087=    }
n2088=    if %mns == rlca {
n2089=      var %bin 00000111
n2090=      goto end
n2091=    }
n2092=    if %mns == rrca {
n2093=      var %bin 00001111
n2094=      goto end
n2095=    }
n2096=    if %mns == rla {
n2097=      var %bin 00010111
n2098=      goto end
n2099=    }
n2100=    if %mns == rra {
n2101=      var %bin 00011111
n2102=      goto end
n2103=    }
n2104=    if %mns == daa {
n2105=      var %bin 00100111
n2106=      goto end
n2107=    }
n2108=    if %mns == cpl {
n2109=      var %bin 00101111
n2110=      goto end
n2111=    }
n2112=    if %mns == scf {
n2113=      var %bin 00110111
n2114=      goto end
n2115=    }
n2116=    if %mns == ccf {
n2117=      var %bin 00111111
n2118=      goto end
n2119=    }
n2120=    if %mns == halt {
n2121=      var %bin 01110110
n2122=      goto end
n2123=    }
n2124=    var %a $omni.z80.a.alu(%m1)
n2125=    if %a != $null {
n2126=      if (%m1 != add) && (%m1 != adc) && (%m1 != sbc) && (%m2.2- == $null) {
n2127=        var %x %m2.1-
n2128=      }
n2129=      else {
n2130=        var %x $omni.z80.a.reg8(%m2.1)
n2131=        if (%x == 111) {
n2132=          var %x %m2.2-
n2133=        }
n2134=        else {
n2135=          var %x
n2136=        }
n2137=      }
n2138=      if %x != $null {
n2139=        var %b $omni.z80.a.reg8(%x)
n2140=        if %b != $null {
n2141=          var %prefix $omni.z80.a.reg8prefix(%x)
n2142=          var %bin 10 $+ %a $+ %b
n2143=          goto end
n2144=        }
n2145=        var %b $omni.z80.a.imm8(%x,%model)
n2146=        if %b != $null {
n2147=          var %bin 11 $+ %a $+ 110 $+ %b
n2148=          goto end
n2149=        }
n2150=        var %x $omni.z80.a.regiofs8(%x,%model)
n2151=        var %p $gettok(%x,1,32)
n2152=        var %b $gettok(%x,2-,32)
n2153=        if %b != $null {
n2154=          var %prefix %p
n2155=          var %bin 10 $+ %a $+ 110 $+ %b
n2156=          goto end
n2157=        }
n2158=      }
n2159=    }
n2160=    if %m1 == ret {
n2161=      var %a $omni.z80.a.cc(%m2.1-)
n2162=      if %a != $null {
n2163=        var %bin 11 $+ %a $+ 000
n2164=        goto end
n2165=      }
n2166=      if %m2.1- == $null {
n2167=        var %bin 11001001
n2168=        goto end
n2169=      }
n2170=    }
n2171=    if %m1 == pop {
n2172=      var %a $omni.z80.a.reg16af(%m2.1-)
n2173=      if %a != $null {
n2174=        var %prefix $omni.z80.a.reg16prefix(%m2.1-)
n2175=        var %bin 11 $+ %a $+ 0001
n2176=        goto end
n2177=      }
n2178=    }
n2179=    if %mns == exx {
n2180=      var %bin 11011001
n2181=      goto end
n2182=    }
n2183=    if %m1 == jp {
n2184=      var %reg16ptr $omni.z80.a.ptr(%m2.1-)
n2185=      if %reg16ptr != $null {
n2186=        if $omni.z80.a.ishlixiy(%reg16ptr) {
n2187=          var %prefix $omni.z80.a.reg16prefix(%reg16ptr)
n2188=          var %bin 11101001
n2189=          goto end
n2190=        }
n2191=      }
n2192=      var %a $omni.z80.a.cc(%m2.1)
n2193=      if %a != $null {
n2194=        var %b $omni.z80.a.imm16(%m2.2-,%model,%wordbits)
n2195=        if %b != $null {
n2196=          var %bin 11 $+ %a $+ 010 $+ %b
n2197=          goto end
n2198=        }
n2199=      }
n2200=      var %a $omni.z80.a.imm16(%m2.1-,%model,%wordbits)
n2201=      if %a != $null {
n2202=        var %bin 11000011 $+ %a
n2203=        goto end
n2204=      }
n2205=    }
n2206=    if %m1 == in {
n2207=      var %port $omni.z80.a.port(%m2.2-)
n2208=      if %port != $null {
n2209=        if (%port == c) || (%ez80 && (%port == bc)) {
n2210=          if %m2.1 == f {
n2211=            var %a 110
n2212=          }
n2213=          else {
n2214=            var %a $omni.z80.a.reg8nohl(%m2.1,0)
n2215=          }
n2216=          if %a != $null {
n2217=            var %bin 1110110101 $+ %a $+ 000
n2218=            goto end
n2219=          }
n2220=        }
n2221=        var %b $omni.z80.a.imm8(%port,%model)
n2222=        if %b != $null {
n2223=          if %m2.1 == a {
n2224=            var %bin 11011011 $+ %b
n2225=            goto end
n2226=          }
n2227=        }
n2228=      }
n2229=      var %port $omni.z80.a.port(%m2.1-)
n2230=      if (%port == c) || (%ez80 && (%port == bc)) {
n2231=        var %bin 1110110101110000
n2232=        goto end
n2233=      }
n2234=    }
n2235=    if %m1 == out {
n2236=      var %port $omni.z80.a.port(%m2.1)
n2237=      if %port != $null {
n2238=        if (%port == c) || (%ez80 && (%port == bc)) {
n2239=          if %m2.2- == 0 {
n2240=            if !%ez80 {
n2241=              var %a 110
n2242=            }
n2243=          }
n2244=          else {
n2245=            var %a $omni.z80.a.reg8nohl(%m2.2-,0)
n2246=          }
n2247=          if %a != $null {
n2248=            var %bin 1110110101 $+ %a $+ 001
n2249=            goto end
n2250=          }
n2251=        }
n2252=        var %a $omni.z80.a.imm8(%port,%model)
n2253=        if %a != $null {
n2254=          if %m2.2- == a {
n2255=            var %bin 11010011 $+ %a
n2256=            goto end
n2257=          }
n2258=        }
n2259=      }
n2260=    }
n2261=    if %mns == di {
n2262=      var %bin 11110011
n2263=      goto end
n2264=    }
n2265=    if %mns == ei {
n2266=      var %bin 11111011
n2267=      goto end
n2268=    }
n2269=    if %m1 == call {
n2270=      var %a $omni.z80.a.cc(%m2.1)
n2271=      if %a != $null {
n2272=        var %b $omni.z80.a.imm16(%m2.2-,%model,%wordbits)
n2273=        if %b != $null {
n2274=          var %bin 11 $+ %a $+ 100 $+ %b
n2275=          goto end
n2276=        }
n2277=      }
n2278=      var %a $omni.z80.a.imm16(%m2.1-,%model,%wordbits)
n2279=      if %a != $null {
n2280=        var %bin 11001101 $+ %a
n2281=        goto end
n2282=      }
n2283=    }
n2284=    if %m1 == push {
n2285=      var %a $omni.z80.a.reg16af(%m2.1-)
n2286=      if %a != $null {
n2287=        var %prefix $omni.z80.a.reg16prefix(%m2.1-)
n2288=        var %bin 11 $+ %a $+ 0101
n2289=        goto end
n2290=      }
n2291=    }
n2292=    if %m1 == rst {
n2293=      var %a $omni.z80.a.rst(%m2.1-,%model)
n2294=      if %a != $null {
n2295=        var %bin 11 $+ %a $+ 111
n2296=        goto end
n2297=      }
n2298=    }
n2299=    var %a $omni.z80.a.rot(%m1)
n2300=    if %a != $null {
n2301=      if %ez80 && (%a == 110) {
n2302=        goto error
n2303=      }
n2304=      var %b $omni.z80.a.reg8(%m2.1-,0)
n2305=      if %b != $null {
n2306=        var %bin 1100101100 $+ %a $+ %b
n2307=        goto end
n2308=      }
n2309=      var %x $omni.z80.a.regiofs8(%m2.1,%model)
n2310=      var %p $gettok(%x,1,32)
n2311=      var %b $gettok(%x,2-,32)
n2312=      if %b != $null {
n2313=        if %m2.2- == $null {
n2314=          var %prefix %p
n2315=          var %bin 11001011 $+ %b $+ 00 $+ %a $+ 110
n2316=          goto end
n2317=        }
n2318=        if !%ez80 {
n2319=          var %c $omni.z80.a.reg8nohl(%m2.2-,0)
n2320=          if %c != $null {
n2321=            var %prefix %p
n2322=            var %bin 11001011 $+ %b $+ 00 $+ %a $+ %c
n2323=            goto end
n2324=          }
n2325=        }
n2326=      }
n2327=    }
n2328=    var %o $omni.z80.a.bit(%m1)
n2329=    if %o != $null {
n2330=      var %a $omni.z80.a.imm3(%m2.1,%model)
n2331=      if %a != $null {
n2332=        var %b $omni.z80.a.reg8(%m2.2-,0)
n2333=        if %b != $null {
n2334=          var %bin 11001011 $+ %o $+ %a $+ %b
n2335=          goto end
n2336=        }
n2337=        var %x $omni.z80.a.regiofs8(%m2.2,%model)
n2338=        var %p $gettok(%x,1,32)
n2339=        var %b $gettok(%x,2-,32)
n2340=        if %b != $null {
n2341=          if %m2.3 == $null {
n2342=            var %c 110
n2343=          }
n2344=          elseif !%ez80 {
n2345=            var %c $omni.z80.a.reg8nohl(%m2.3,0)
n2346=          }
n2347=          if %c != $null {
n2348=            var %prefix %p
n2349=            var %bin 11001011 $+ %b $+ %o $+ %a $+ %c
n2350=            goto end
n2351=          }
n2352=        }
n2353=      }
n2354=    }
n2355=    if %m1 == sbc {
n2356=      if %m2.1 == hl {
n2357=        var %a $omni.z80.a.reg16(%m2.2-,0)
n2358=        if %a != $null {
n2359=          var %bin 1110110101 $+ %a $+ 0010
n2360=          goto end
n2361=        }
n2362=      }
n2363=    }
n2364=    if %m1 == adc {
n2365=      if %m2.1 == hl {
n2366=        var %a $omni.z80.a.reg16(%m2.2-,0)
n2367=        if %a != $null {
n2368=          var %bin 1110110101 $+ %a $+ 1010
n2369=          goto end
n2370=        }
n2371=      }
n2372=    }
n2373=    if %mns == neg {
n2374=      var %bin 1110110101000100
n2375=      goto end
n2376=    }
n2377=    if %mns == retn {
n2378=      var %bin 1110110101000101
n2379=      goto end
n2380=    }
n2381=    if %mns == reti {
n2382=      var %bin 1110110101001101
n2383=      goto end
n2384=    }
n2385=    if %m1 == im {
n2386=      var %a $omni.z80.a.im(%m2.1-)
n2387=      if (%a != $null) && (!%ez80 || (%a != 01)) {
n2388=        var %bin 1110110101 $+ %a $+ 110
n2389=        goto end
n2390=      }
n2391=    }
n2392=    if %mns == rrd {
n2393=      var %bin 1110110101100111
n2394=      goto end
n2395=    }
n2396=    if %mns == rld {
n2397=      var %bin 1110110101101111
n2398=      goto end
n2399=    }
n2400=    if !%ez80 {
n2401=      var %a $omni.z80.a.bli(%m)
n2402=      if %a != $null {
n2403=        var %bin 11101101 $+ %a
n2404=        goto end
n2405=      }
n2406=    }
n2407=    else {
n2408=      if %m2.1- == $null {
n2409=        var %a $omni.z80.a.blie(%m1)
n2410=        if %a != $null {
n2411=          var %bin 11101101 $+ %a
n2412=          goto end
n2413=        }
n2414=      }
n2415=      if %m1 == in0 {
n2416=        var %port $omni.z80.a.port(%m2.2-)
n2417=        if %port != $null {
n2418=          var %b $omni.z80.a.imm8(%port,%model)
n2419=          if %b != $null {
n2420=            if %m2.1 == f {
n2421=              var %a 110
n2422=            }
n2423=            else {
n2424=              var %a $omni.z80.a.reg8nohl(%m2.1,0)
n2425=            }
n2426=            if %a != $null {
n2427=              var %bin 1110110100 $+ %a $+ 000 $+ %b
n2428=              goto end
n2429=            }
n2430=          }
n2431=        }
n2432=        var %port $omni.z80.a.port(%m2.1-)
n2433=        if %port != null {   
n2434=          var %b $omni.z80.a.imm8(%port,%model)
n2435=          if %b != $null {
n2436=            var %bin 1110110100110000 $+ %b
n2437=            goto end
n2438=          }
n2439=        }
n2440=      }
n2441=      if %m1 == out0 {
n2442=        var %port $omni.z80.a.port(%m2.1)
n2443=        if %port != $null {
n2444=          var %b $omni.z80.a.imm8(%port,%model)
n2445=          if %b != $null {
n2446=            var %a $omni.z80.a.reg8nohl(%m2.2-,0)
n2447=            if %a != $null {
n2448=              var %bin 1110110100 $+ %a $+ 001 $+ %b
n2449=              goto end
n2450=            }
n2451=          }
n2452=        }
n2453=      }
n2454=      if %m1 == lea {
n2455=        var %x $omni.z80.a.regiofs8(%m2.2-,%model,0)
n2456=        var %p $gettok(%x,1,32)
n2457=        var %b $gettok(%x,2,32)
n2458=        if %b != $null {
n2459=          var %a $omni.z80.a.reg16e(%m2.1,%p)
n2460=          if %a != $null {
n2461=            var %piy $iif(%p == 11111101,1,0)
n2462=            if %a == 100 {
n2463=              var %bin 111011010101010 $+ $iif(%piy,0,1) $+ %b
n2464=              goto end
n2465=            }
n2466=            var %bin 1110110100 $+ %a $+ 001 $+ %piy $+ %b
n2467=            goto end
n2468=          }
n2469=        }
n2470=      }
n2471=      if %m1 == tst {
n2472=        if %m2.1 == a {
n2473=          var %b $omni.z80.a.reg8(%m2.2-,0)
n2474=          if %b != $null {
n2475=            var %bin 1110110100 $+ %b $+ 100
n2476=            goto end
n2477=          }
n2478=          var %b $omni.z80.a.imm8(%m2.2-,%model)
n2479=          if %b != $null {
n2480=            var %bin 1110110101100100 $+ %b
n2481=            goto end
n2482=          }
n2483=        }
n2484=      }
n2485=      if %m1 == tstio {
n2486=        var %a $omni.z80.a.imm8(%m2.1-,%model)
n2487=        if %a != $null {
n2488=          var %bin 1110110101110100 $+ %a
n2489=          goto end
n2490=        }
n2491=      }
n2492=      if %m1 == pea {
n2493=        var %x $omni.z80.a.regiofs8(%m2.1-,%model,0)
n2494=        var %p $gettok(%x,1,32)
n2495=        var %a $gettok(%x,2,32)
n2496=        if %a != $null {
n2497=          var %bin 11101101011001 $+ $iif(%p == 11011101,01,10) $+ %a
n2498=          goto end
n2499=        }
n2500=      }
n2501=      if %mns == slp {
n2502=        var %bin 1110110101110110
n2503=        goto end
n2504=      }
n2505=      if %m1 == mlt {
n2506=        var %a $omni.z80.a.reg16(%m2.1-,0)
n2507=        if %a != $null {
n2508=          var %bin 1110110101 $+ %a $+ 1100
n2509=          goto end
n2510=        }
n2511=      }
n2512=      if %mns == stmix {
n2513=        var %bin 1110110101111101
n2514=        goto end
n2515=      }
n2516=      if %mns == rsmix {
n2517=        var %bin 1110110101111110
n2518=        goto end
n2519=      }
n2520=      if %mns == trap {
n2521=        var %bin 1101110111000111
n2522=        goto end
n2523=      }
n2524=    }
n2525=    :end
n2526=    if %bin == $null {
n2527=      goto error
n2528=    }
n2529=    var %hex
n2530=    var %bin %suffix $+ %prefix $+ %bin
n2531=    while %bin != $null {
n2532=      var %hex %hex $+ $base($left(%bin,8),2,16,2)
n2533=      var %bin $right(%bin,-8)
n2534=    }
n2535=    var %str %str $+ %hex
n2536=    .fwrite -n omni.z80.a.file $chr(9) $+ %m
n2537=    .fwrite -n omni.z80.a.hexfile %hex
n2538=  }
n2539=  .fclose omni.z80.a.*
n2540=  return %str
n2541=  :error
n2542=  .fclose omni.z80.a.*
n2543=  return error $iif(%prefix == 11111101,$replace(%m,ix,iy),%m)
n2544=}
n2545=/omni.z80.a.calc.spaceify {
n2546=  return $regsubex($1,/(?<!'(?<!'.'))([()*/\-+\%^&|!~]|<<|>>|==|<=|>=|<|>|=)/g,$chr(32) $+ \1 $+ $chr(32))
n2547=}
n2548=/omni.z80.a.calc {
n2549=  ;echo -s 1: $1 2: $2 3: $3 4: $4 5: $5
n2550=  var %r $omni.z80.a.calc.main($1,$2,$3,$4,$5)
n2551=  unset %outbits
n2552=  unset %signedmax
n2553=  unset %overflow
n2554=  unset %mainbase
n2555=  unset %mainbaserank
n2556=  unset %opsperformed
n2557=  unset %arg1
n2558=  return %r
n2559=}
n2560=/omni.z80.a.calc.main {
n2561=  if $regex($1,/(?<!')[^\s\w()*/\-+\%^&|$@' $+ $chr(44) $+ <>=]/) {
n2562=    return
n2563=  }
n2564=  set -ln %equ $omni.z80.a.calc.spaceify($1)
n2565=  if %equ == $null {
n2566=    return
n2567=  }
n2568=  var %model $2
n2569=  var %class $iif(%model == 8384pce,eZ80,Z80)
n2570=  var %outbase $iif($3 != $null,$3,auto)
n2571=  set %outbits $iif($4 != $null,$4,16)
n2572=  var %modifiers $5
n2573=  var %max $calc(2 ^ %outbits)
n2574=  set %signedmax $calc(%max / 2)
n2575=  set %overflow 0
n2576=  set %mainbase 10
n2577=  set %mainbaserank -1
n2578=  var %iterations 0
n2579=  set -ln %argstack
n2580=  set -ln %opstack
n2581=  set -n %arg1
n2582=  set -ln %op
n2583=  set -ln %arg2
n2584=  if ($left(%equ,1) == $chr(40)) && ($right(%equ,1) == $chr(41)) {
n2585=    ;echo 4 -s Parentheses
n2586=  }
n2587=  while %equ != $null {
n2588=    :start
n2589=    inc %iterations
n2590=    set -ln %a $gettok(%equ,1,32)
n2591=    if %a == ' {
n2592=      set -ln %a $left(%equ,3)
n2593=      set -ln %equ $right(%equ,-3)
n2594=    }
n2595=    else {
n2596=      set -ln %equ $gettok(%equ,2-,32)
n2597=    }
n2598=    if %arg1 == $null {
n2599=      if $regex(%equ,/^(the )?answer to life( $+ $chr(44) $+ ? the universe $+ $chr(44) $+ ? and everything)?(.*)/i) {
n2600=        omni.z80.a.setarg1 42
n2601=        set -ln %equ $regml(3)
n2602=        inc %iterations
n2603=      }
n2604=      elseif (%a == +) || (%a == -) {
n2605=        omni.z80.a.setarg1 0
n2606=        set -ln %op %a
n2607=        dec %iterations
n2608=      }
n2609=      elseif (%a == %) {
n2610=        set -ln %equ % $+ %equ
n2611=        dec %iterations
n2612=      }
n2613=      elseif %a == $chr(40) {
n2614=        set -ln %argstack null %argstack
n2615=        set -ln %opstack null %opstack
n2616=      }
n2617=      else {
n2618=        var %imm $omni.z80.a.immhandler(%a,%model,%class)
n2619=        if %imm == $null {
n2620=          return
n2621=        }
n2622=        if $gettok(%imm,1,32) == equ {
n2623=          set -ln %equ ( $omni.z80.a.calc.spaceify($gettok(%imm,2-,32)) ) %equ
n2624=          goto start
n2625=        }
n2626=        omni.z80.a.setarg1 %imm
n2627=      }
n2628=    }
n2629=    elseif %op == $null {
n2630=      if $istok(* / - + % ^ & $chr(124) << >> == = <= >= < >,%a,32) {
n2631=        set -ln %op %a
n2632=      }
n2633=      elseif %a == $chr(41) {
n2634=        set -ln %op $gettok(%opstack,1,32)
n2635=        set -ln %opstack $gettok(%opstack,2-,32)
n2636=        set -ln %arg $gettok(%argstack,1,32)
n2637=        set -ln %argstack $gettok(%argstack,2-,32)
n2638=        if %op == $null {
n2639=          return
n2640=        }
n2641=        elseif %op != null {
n2642=          set -ln %arg2 %arg1
n2643=          omni.z80.a.setarg1 %arg
n2644=        }
n2645=        else {
n2646=          set -ln %op
n2647=          set -ln %arg2
n2648=        }
n2649=      } 
n2650=      else {
n2651=        return
n2652=      }
n2653=    }
n2654=    else {
n2655=      if %a == % {
n2656=        set -ln %equ % $+ %equ
n2657=      }
n2658=      elseif %a == $chr(40) {
n2659=        set -ln %argstack %arg1 %argstack
n2660=        omni.z80.a.setarg1
n2661=        set -ln %opstack %op %opstack
n2662=        set -ln %op
n2663=      }
n2664=      else {
n2665=        if $regex(%equ,/^(the )?answer to life $+ $chr(44) $+ ? the universe $+ $chr(44) $+ ? and everything/) {
n2666=          set -ln %imm 42
n2667=          set -ln %equ $regml(1)
n2668=        }
n2669=        else {
n2670=          set -ln %imm $omni.z80.a.immhandler(%a,%model,%class)
n2671=        }
n2672=        if %imm == $null {
n2673=          return
n2674=        }
n2675=        if $gettok(%imm,1,32) == equ {
n2676=          set -ln %equ ( $omni.z80.a.calc.spaceify($gettok(%imm,2-,32)) ) %equ
n2677=          goto start
n2678=        }
n2679=        set -ln %arg2 %imm
n2680=      }
n2681=    }
n2682=    if %arg2 != $null {
n2683=      if $istok(* / - + %,%op,32) {
n2684=        if (%op == /) && (%arg2 == 0) {
n2685=          return
n2686=        }
n2687=        omni.z80.a.setarg1 $floor($calc(%arg1 %op %arg2))
n2688=      }
n2689=      elseif $istok(^ & $chr(124),%op,32) {
n2690=        omni.z80.a.setarg1 $(,$+($,$replace(%op,^,xor,&,and,|,or),$chr(40),%arg1,$chr(44),%arg2,$chr(41)))
n2691=      }
n2692=      elseif $istok(<< >>,%op,32) {
n2693=        omni.z80.a.setarg1 $floor($calc(%arg1 * 2 ^ ($iif(%op == >>, -) %arg2)))
n2694=      }
n2695=      else {
n2696=        omni.z80.a.setarg1 $iif(%arg1 %op %arg2,1,0)
n2697=      }
n2698=      set -ln %op
n2699=      set -ln %arg2
n2700=    }
n2701=  }
n2702=  if (%op != $null) || (%arg2 != $null) || (%opstack != $null) || (%argstack != $null) {
n2703=    return
n2704=  }
n2705=  if (%outbase == auto) {
n2706=    var %outbase %mainbase
n2707=    var %autobase %outbase
n2708=    if !%overflow {
n2709=      var %modifiers %modifiers signed
n2710=    }
n2711=  }
n2712=  var %arg1 $calc(%arg1 % %max)
n2713=  var %arg1 $iif(%arg1 < 0,$calc(%max + %arg1),%arg1)
n2714=  if (%outbase == char && (%arg1 < 32 || %arg1 >= 127)) {
n2715=    var %outbase 16
n2716=  }
n2717=  var %exp $findtok(2 4 8 16,%outbase,32)
n2718=  if (%outbase == 10) && $istok(%modifiers,signed,32) {
n2719=    var %r $iif(%arg1 >= %signedmax,- $+ $calc(%max - %arg1),%arg1)
n2720=  }
n2721=  else {
n2722=    if %exp {
n2723=      var %r $base(%arg1,10,%outbase,$ceil($calc(%outbits / %exp)))
n2724=    }
n2725=    elseif %outbase == char {
n2726=      var %r $chr($iif(%arg1 != 32,%arg1,160))
n2727=    }
n2728=    else {
n2729=      var %r $base(%arg1,10,%outbase)
n2730=    }
n2731=    var %digitsperbyte $calc(8 / %exp)
n2732=    if !$istok(%modifiers,big,32) && $istok(8 2,%digitsperbyte,32) {
n2733=      var %r2
n2734=      var %i 1
n2735=      while ($len(%r2) < $len(%r)) {
n2736=        var %r2 $mid(%r,%i,%digitsperbyte) $+ %r2
n2737=        inc %i %digitsperbyte
n2738=      }
n2739=      var %r %r2
n2740=    }
n2741=  }
n2742=  return $iif($istok(%modifiers,format,32),$iif(%outbase == 2,% $+ %r,$iif(%outbase == 8,%r $+ o,$iif(%outbase == 16,$ $+ %r,$iif(%outbase == char,' $+ %r $+ ',%r)))),%r) $iif(%autobase,%autobase %iterations)
n2743=}
n2744=/omni.z80.a.unop {
n2745=  var %op $1
n2746=  var %arg $2
n2747=  if (%op == +) {
n2748=    return %arg
n2749=  }
n2750=  if (%op == -) {
n2751=    return $calc(- %arg)
n2752=  }
n2753=  if (%op == ~) {
n2754=    return $calc()
n2755=  }
n2756=  TODO
n2757=}
n2758=/omni.z80.a.setarg1 {
n2759=  set -n %arg1 $1-
n2760=  if (%arg1 >= %signedmax) || (%arg1 <= $calc(-%signedmax)) {
n2761=    set %overflow 1
n2762=  }
n2763=}
n2764=/omni.z80.a.bintosigned {
n2765=  var %bin $1
n2766=  var %bits $iif($2 != $null,$2,$len(%bin))
n2767=  var %maxneg $calc(2 ^ ($len(%bin) - 1))
n2768=  var %dec $base(%bin,2,10)
n2769=  return $iif(%dec >= %maxneg,$calc(%dec - %maxneg * 2),%dec)
n2770=}
n2771=/omni.z80.a.immhandler {
n2772=  tokenize 32 $omni.z80.a.immhandler.main($1,$2,$3)
n2773=  if ($1 != equ) {
n2774=    if ($abs($1) > %mainbaserank) {
n2775=      set %mainbase $2
n2776=      set %mainbaserank $abs($1)    
n2777=    }
n2778=    tokenize 32 $1
n2779=  }
n2780=  return $1-
n2781=}
n2782=/omni.z80.a.immhandler.main {
n2783=  :start
n2784=  if $regex($1,/^([0-9]+)(d)?$/) {
n2785=    return $regml(1) 10
n2786=  }
n2787=  var %bin
n2788=  if $left($1,1) == % {
n2789=    var %bin $right($1,-1)
n2790=  }
n2791=  if $right($1,1) === b {
n2792=    var %bin $left($1,-1)
n2793=  }
n2794=  if $regex(%bin,/^[01]{1 $+ $chr(44) $+ 32}$/) {
n2795=    return $base(%bin,2,10) 2
n2796=  }
n2797=  var %hex
n2798=  if $left($1,1) == $ {
n2799=    var %hex $right($1,-1)
n2800=  }
n2801=  if $right($1,1) === h && $left($1,1) isnum {
n2802=    var %hex $left($1,-1)
n2803=  }
n2804=  if $regex(%hex,/^[0-9A-Fa-f]{1 $+ $chr(44) $+ 8}$/) {
n2805=    return $base(%hex,16,10) 16
n2806=  }
n2807=  var %oct
n2808=  if $left($1,1) == @ {
n2809=    var %oct $right($1,-1)
n2810=  }
n2811=  if $right($1,1) == o {
n2812=    var %oct $left($1,-1)
n2813=  }
n2814=  if $regex(%oct,/^[0-7]+$/) {
n2815=    return $base(%oct,8,10) 8
n2816=  }
n2817=  if $regex($1,/^'.'$/) {
n2818=    return $asc($mid($1,2,1)) 16
n2819=  }
n2820=  if !$regex($1,/^[A-Za-z0-9_]+$/) {
n2821=    return
n2822=  }
n2823=  var %r
n2824=  var %i 1
n2825=  while (%r == $null) && (%i <= $numtok($omni.z80.includes($2),32)) {
n2826=    var %f $omni.file($gettok($omni.z80.includes($2),%i,32),$3)
n2827=    var %r $read(%f,ntr,/^[ $+ $chr(9) $+ $chr(32) $+ ]* $+ $1 $+ [ $+ $chr(9) $+ $chr(32) $+ ]+(\.?equ[ $+ $chr(9) $+ $chr(32) $+ ]+|=[ $+ $chr(9) $+ $chr(32) $+ ]*)([^ $+ $chr(9) $+ ;]+)/i))
n2828=    inc %i
n2829=  }
n2830=  if %r != $null {
n2831=    return equ $regml(2)
n2832=  }
n2833=}
n2834=/omni.z80.a.ptr {
n2835=  if ($left($1,1) != $chr(40)) || ($right($1,1) != $chr(41)) {
n2836=    return
n2837=  }
n2838=  return $left($right($1,-1),-1)
n2839=}
n2840=/omni.z80.a.port {
n2841=  return $omni.z80.a.ptr($1)
n2842=}
n2843=/omni.z80.a.imm3 {
n2844=  var %bin $omni.z80.a.calc($1,$2,2,3)
n2845=  return $iif($len(%bin) == 3,%bin)
n2846=}
n2847=/omni.z80.a.ofs8 {
n2848=  var %bin $omni.z80.a.calc($1,$2,2,32,big)
n2849=  var %dec $omni.z80.a.bintosigned(%bin)
n2850=  if (%dec < -128) || (%dec > 127) {
n2851=    return
n2852=  }
n2853=  return $right(%bin,8)
n2854=}
n2855=/omni.z80.a.ofs8pc {
n2856=  if $1 == $ {
n2857=    tokenize 32 $ $+ +0
n2858=  }
n2859=  if $regex($1,/^\$ *[-+]/) {
n2860=    return $omni.z80.a.ofs8(-2 $+ $right($1,-1),$2)
n2861=  }
n2862=  if $regex($1,/^\+ *\$$/) {
n2863=    return $omni.z80.a.ofs8($left($1,-1) $+ -2,$2)
n2864=  }
n2865=}
n2866=/omni.z80.a.imm8 {
n2867=  var %bin $omni.z80.a.calc($1,$2,2,8)
n2868=  if %bin == $null {
n2869=    return
n2870=  }
n2871=  return $right(%bin,8)
n2872=}
n2873=/omni.z80.a.imm16 {
n2874=  var %bin $omni.z80.a.calc($1,$2,2,$3)
n2875=  return %bin
n2876=}
n2877=/omni.z80.a.rst {
n2878=  var %bin $omni.z80.a.calc($1,$2,2,8)
n2879=  if !$regex(%bin,/^00(...)000$/) {
n2880=    return
n2881=  }
n2882=  return $regml(1)
n2883=}
n2884=/omni.z80.a.reg8prefix {
n2885=  if $1 == ixh || $1 == ixl {
n2886=    return 11011101
n2887=  }
n2888=  if $1 == iyh || $1 == iyl {
n2889=    return 11111101
n2890=  }
n2891=}
n2892=/omni.z80.a.reg8 {
n2893=  if $2 != 0 {
n2894=    if ($1 == ixh) || ($1 == iyh) {
n2895=      return 100
n2896=    }
n2897=    if ($1 == ixl) || ($1 == iyl) {
n2898=      return 101
n2899=    }
n2900=  }
n2901=  var %a $findtok(b_c_d_e_h_l_(hl)_a,$1,1,95)
n2902=  if %a == $null {
n2903=    return
n2904=  }
n2905=  return $base($calc(%a - 1),10,2,3)
n2906=}
n2907=/omni.z80.a.reg8nohl {
n2908=  if $1 == (hl) {
n2909=    return
n2910=  }
n2911=  return $omni.z80.a.reg8($1,$2)
n2912=}
n2913=/omni.z80.a.regiofs8 {
n2914=  var %a $1
n2915=  var %lp \(
n2916=  var %rp \)
n2917=  if $3 == 0 {
n2918=    var %lp
n2919=    var %rp
n2920=  }
n2921=  if $regsub(%a,/^( $+ %lp $+ (?:ix|iy))( $+ %rp $+ )$/i,\1+0\2,%a) {
n2922=    ;intentionally left blank
n2923=  }
n2924=  if !$regex(%a,/^ $+ %lp $+ (ix|iy) *([+-].+) $+ %rp $+ $ $+ /i) {
n2925=    return
n2926=  }
n2927=  return $iif($regml(1) == ix,11011101,11111101) $omni.z80.a.ofs8($regml(2),$2-)
n2928=}
n2929=/omni.z80.a.ishlixiy {
n2930=  return $iif(($1 == hl) || ($1 == ix) || ($1 == iy),1,0)
n2931=}
n2932=/omni.z80.a.reg16prefix {
n2933=  if $1 == ix {
n2934=    return 11011101
n2935=  }
n2936=  if $1 == iy {
n2937=    return 11111101
n2938=  }
n2939=}
n2940=/omni.z80.a.reg16 {
n2941=  if $2 != 0 {
n2942=    if ($1 == ix) || ($1 == iy) {
n2943=      return 10
n2944=    }
n2945=  }
n2946=  var %a $findtok(bc_de_hl_sp,$1,1,95)
n2947=  if %a == $null {
n2948=    return
n2949=  }
n2950=  return $base($calc(%a - 1),10,2,2)
n2951=}
n2952=/omni.z80.a.reg16af {
n2953=  if $2 != 0 {
n2954=    if ($1 == ix) || ($1 == iy) {
n2955=      return 10
n2956=    }
n2957=  }
n2958=  var %a $findtok(bc_de_hl_af,$1,1,95)
n2959=  if %a == $null {
n2960=    return
n2961=  }
n2962=  return $base($calc(%a - 1),10,2,2)
n2963=}
n2964=/omni.z80.a.reg16e {
n2965=  var %a $findtok(bc_de_hl_ $+ $iif($2 == 11111101,iy_ix,ix_iy),$1,1,95)
n2966=  if %a == $null {
n2967=    return
n2968=  }
n2969=  return $base($calc(%a - 1),10,2,2)
n2970=}
n2971=/omni.z80.a.cc {
n2972=  var %a $findtok(nz_z_nc_c_po_pe_p_m,$1,1,95)
n2973=  if %a == $null {
n2974=    return
n2975=  }
n2976=  return $base($calc(%a - 1),10,2,3)
n2977=}
n2978=/omni.z80.a.ccjr {
n2979=  var %a $findtok(nz_z_nc_c,$1,1,95)
n2980=  if %a == $null {
n2981=    return
n2982=  }
n2983=  return $base($calc(%a + 4 - 1),10,2,2)
n2984=}
n2985=/omni.z80.a.alu {
n2986=  var %a $findtok(add_adc_sub_sbc_and_xor_or_cp,$1,1,95)
n2987=  if %a == $null {
n2988=    return
n2989=  }
n2990=  return $base($calc(%a - 1),10,2,3)
n2991=}
n2992=/omni.z80.a.rot {
n2993=  if $1 == sl1 {
n2994=    return 110
n2995=  }
n2996=  var %a $findtok(rlc_rrc_rl_rr_sla_sra_sll_srl,$1,1,95)
n2997=  if %a == $null {
n2998=    return
n2999=  }
n3000=  return $base($calc(%a - 1),10,2,3)
n3001=}
n3002=/omni.z80.a.bit {
n3003=  var %a $findtok(bit_res_set,$1,1,95)
n3004=  if %a == $null {
n3005=    return
n3006=  }
n3007=  return $base(%a,10,2,2)
n3008=}
n3009=/omni.z80.a.im {
n3010=  var %a $findtok(0_0/1_1_2,$1,1,95)
n3011=  if %a == $null {
n3012=    return
n3013=  }
n3014=  return $base($calc(%a - 1),10,2,3)
n3015=}
n3016=/omni.z80.a.bli {
n3017=  var %a $findtok(ldi_cpi_ini_outi_ldd_cpd_ind_outd_ldir_cpir_inir_otir_lddr_cpdr_indr_otdr,$1,1,95)
n3018=  if %a == $null {
n3019=    return
n3020=  }
n3021=  var %a $base($calc(%a - 1),10,2,4)
n3022=  return 101 $+ $left(%a,2) $+ 0 $+ $right(%a,2)
n3023=}
n3024=/omni.z80.a.blie {
n3025=  if $1 == . {
n3026=    return
n3027=  }
n3028=  var %a $findtok(._._inim_otim_ini2_._._._._._indm_otdm_ind2_._._._._._inimr_otimr_ini2r_._._._._._indmr_otdmr_ind2r_._._._ldi_cpi_ini_outi_outi2_._._._ldd_cpd_ind_outd_outd2_._._._ldir_cpir_inir_otir_oti2r_._._._lddr_cpdr_indr_otdr_otd2r_._._._._._inirx_otirx_._._._._._._indrx_otdrx,$1,1,95)
n3029=  if %a == $null {
n3030=    return
n3031=  }
n3032=  return 1 $+ $base($calc(%a - 1),10,2,7)
n3033=}
n3034=/omni.z80.color.op {
n3035=  return 02
n3036=}
n3037=/omni.z80.color.def {
n3038=  return 14
n3039=}
n3040=/omni.z80.color.punct {
n3041=  return 01
n3042=}
n3043=/omni.z80.color.reg {
n3044=  return 03
n3045=}
n3046=/omni.z80.color.imm {
n3047=  return 07
n3048=}
n3049=/omni.z80.color.flag {
n3050=  return 05
n3051=}
n3052=/omni.z80.color.bcall {
n3053=  return 07
n3054=}
n3055=/omni.z80.color.bold {
n3056=  return $+(,$replace($1-,$omni.z80.color.punct,$omni.z80.color.punct $+ ),)
n3057=}
n3058=/omni.axe.check {
n3059=  return $regex($2,/^axe(parser)?\b/i)
n3060=}
n3061=/omni.axe.syntax {
n3062=
n3063=}
n3064=/omni.axe.help {
n3065=
n3066=}
n3067=/omni.axe {
n3068=  var %nick $1
n3069=  var %chan $2
n3070=  var %target $3-4
n3071=  var %errortarget $5-6
n3072=  var %command $7
n3073=  var %query $8-
n3074=  if %query == $null {
n3075=    halt
n3076=  }
n3077=}
n3078=/omni.sprite.check {
n3079=  return $regex($2,/^sprite\b/i)
n3080=}
n3081=/omni.sprite.syntax {
n3082=
n3083=}
n3084=/omni.sprite.help {
n3085=
n3086=}
n3087=/omni.sprite {
n3088=  var %nick $1
n3089=  var %chan $2
n3090=  var %omnomirc $3
n3091=  var %target $4-5
n3092=  var %errortarget $6-7
n3093=  var %command $8
n3094=  set -ln %query $strip($9-)
n3095=  if $regex(%query,/\[([0-9A-F]{16})\](\[([0-9A-F]{16})\])?/i) {
n3096=    var %sprite $regml(1) $+ $mid($regml(2),2,16)
n3097=    var %y 0
n3098=    while (%y < 8) {
n3099=      var %line
n3100=      var %x 0
n3101=      while (%x < 8) {
n3102=        var %ctop $omni.sprite.getcolor(%sprite,%x,%y)
n3103=        var %cbot $omni.sprite.getcolor(%sprite,%x,$calc(%y + 1))
n3104=        var %line $+(%line,,%cbot,$chr(44),%ctop,$iif(%ctop == %cbot,█,▄))
n3105=        inc %x
n3106=      }
n3107=      %target $omni.class(SPRITE) $omni.divider %line
n3108=      inc %y 2
n3109=    }
n3110=  }
n3111=}
n3112=/omni.sprite.getcolor {
n3113=  var %sprite $1
n3114=  var %x $2
n3115=  var %y $3
n3116=  var %depth $calc(2 ^ ($len(%sprite) / 16))
n3117=  var %r 0
n3118=  while (%sprite != $null) {
n3119=    var %spritec $left(%sprite,16)
n3120=    var %r $calc(%r * 2 + $omni.sprite.getbit(%spritec,%x,%y))
n3121=    var %sprite $right(%sprite,-16)
n3122=  }
n3123=  inc %r
n3124=  if (%depth == 2) {
n3125=    return $gettok(0 1,%r,32)
n3126=  }
n3127=  return $gettok(0 15 14 1,%r,32)
n3128=}
n3129=/omni.sprite.getbit {
n3130=  return $iif($mid($base($mid($1,$floor($calc($3 * 2 + $2 / 4 + 1)),1),16,2,4),$calc($2 % 4 + 1),1),1,0)
n3131=}
n3132=/omni.hexvalidate {
n3133=  if $1 == $null {
n3134=    return error null
n3135=  }
n3136=  if $regex($1,/[^0-9A-Fa-f]/) {
n3137=    return error invalid
n3138=  }
n3139=  if $calc($len($1) / 2) != $floor($calc($len($1) / 2)) {
n3140=    return error parity
n3141=  }
n3142=}
n3143=/omni.color.check {
n3144=  return $regex($2,/^c(olou?r)?\b/i)
n3145=}
n3146=/omni.color.help {
n3147=
n3148=}
n3149=/omni.color {
n3150=  var %nick $1
n3151=  var %chan $2
n3152=  var %omnomirc $3
n3153=  var %target $4-5
n3154=  var %errortarget $6-7
n3155=  var %command $8
n3156=  set -ln %query $strip($9-)
n3157=  if %query == $null {
n3158=    omni.color.help $1-
n3159=  }
n3160=  tokenize 32 %query
n3161=  var %outspacestr $1
n3162=  var %outspace $omni.color.space(%outspacestr)
n3163=  var %colorquery $2-
n3164=  if %outspace == $null {
n3165=    %errortarget $omni.class(COLOR) ERROR $omni.divider Unknown colorspace: %outspacestr
n3166=    halt
n3167=  }
n3168=  if $regex($2,/([-=])+>/) {
n3169=    var %inspacestr %outspacestr
n3170=    var %inspace %outspace
n3171=    var %outspacestr $3
n3172=    var %outspace $omni.color.space(%outspacestr)
n3173=    var %colorquery $4-
n3174=    if %outspace == $null {
n3175=      %errortarget $omni.class(COLOR) ERROR $omni.divider Unknown colorspace: %outspacestr
n3176=      halt
n3177=    }
n3178=  }
n3179=  if ((%inspacestr == RGB24) || (%inspacestr == BGR24) || (%inspacestr == $null)) && $regex(%colorquery,/^(?:#|0x)?([0-9A-F]{6})h?$/i) {
n3180=    var %incolor $omni.color.unpack(RGB24,$regml(1))
n3181=    if %inspace == $null {
n3182=      var %inspacestr RGB24
n3183=      var %inspace $omni.color.space(RGB24)
n3184=    }
n3185=  }
n3186=  else if ((%inspacestr == RGB16) || (%inspacestr == BGR16) || (%inspacestr == $null)) && $regex(%colorquery,/^(?:0x)?([0-9A-F]{4})h?$/i) {
n3187=    var %incolor $omni.color.unpack(RGB16,$regml(1))
n3188=    if %inspacestr == $null {
n3189=      var %inspacestr RGB16
n3190=      var %inspace $omni.color.space(RGB16)
n3191=    }
n3192=  }
n3193=  else if ((%inspacestr == RGB1555) || (%inspacestr == BGR1555)) && $regex(%colorquery,/^(?:0x)?([0-9A-F]{4})h?$/i) {
n3194=    var %incolor $omni.color.unpack(%inspacestr,$regml(1))
n3195=    var %inspace $omni.color.space(%inspacestr,1)
n3196=  }
n3197=  else if ((%inspacestr == xLIBC) || (%inspacestr == $null)) && ($regex(%colorquery,/^([0-9]{1,3})$/i) || $regex(%colorquery,/^(?:0x)?()([0-9A-F]{2})h?$/i)) {
n3198=    var %incolor $omni.color.unpack(xLIBC,$iif($regml(1) != $null,$base($regml(1),10,16,2),$regml(2)))
n3199=    if %incolor == $omni.color.unpack(xLIBC,57) {
n3200=      %errortarget $omni.class(COLOR) ERROR $omni.divider That's transparent, dummy
n3201=      halt
n3202=    }
n3203=    if %inspacestr == $null {
n3204=      var %inspacestr xLIBC
n3205=    }
n3206=    var %inspace $omni.color.space(xLIBC,1)
n3207=  }
n3208=  else if $regex($remove(%colorquery,$chr(32)),$+(/[,$chr(40),\[{]?([\d]+),$chr(44),([\d]+),$chr(44),([\d]+)[,$chr(41),\]}]?/i)) {
n3209=    var %incolor $regml(1) $regml(2) $regml(3)
n3210=  }
n3211=  else {
n3212=    %errortarget $omni.class(COLOR) ERROR $omni.divider Cannot parse color: %colorquery
n3213=    halt
n3214=  }
n3215=  if %inspace == $null {
n3216=    %errortarget $omni.class(COLOR) ERROR $omni.divider Cannot determine input colorspace
n3217=    halt
n3218=  }
n3219=  var %i 1
n3220=  while %i <= 3 {
n3221=    var %c $gettok(%incolor,%i,32)
n3222=    var %b $gettok(%inspace,$calc(%i + 3),32)
n3223=    if %c > $omni.intmax(%b) {
n3224=      %errortarget $omni.class(COLOR) ERROR $omni.divider Value %c outside of %b $+ -bit range
n3225=      halt
n3226=    }
n3227=    inc %i
n3228=  }
n3229=  var %outcolor $omni.color.convert(%incolor,%inspace,%outspace)
n3230=  var %similarity $calc($omni.color.similarity(%incolor,%inspace,%outcolor,$omni.color.space(%outspace,1)) * 100)
n3231=  %target $omni.class(COLOR) $omni.color.tostring(%inspacestr,%incolor) ==> $omni.color.tostring(%outspacestr,%outcolor) $+ $iif(%similarity != 100,$chr(44) %similarity $+ % similar)
n3232=}
n3233=/omni.color.convert {
n3234=  var %incolor $1
n3235=  var %inspace $2
n3236=  var %outspace $3
n3237=  ;echo -s incolor %incolor
n3238=  ;echo -s inspace %inspace
n3239=  ;echo -s outspace %outspace
n3240=  if (%outspace == xLIBC) {
n3241=    var %bestsim 0
n3242=    var %i 0
n3243=    while %i < 256 {
n3244=      if (%i != 87) {
n3245=        var %xcolor $omni.color.unpack(xLIBC,$base(%i,10,16,2))
n3246=        var %sim $omni.color.similarity(%incolor,%inspace,%xcolor,R G B 5 6 5)
n3247=        if %sim > %bestsim {
n3248=          var %bestsim %sim
n3249=          var %bestxcolor %xcolor
n3250=        }
n3251=      }
n3252=      inc %i
n3253=    }
n3254=    return %bestxcolor
n3255=  }
n3256=  var %rgb1555 $iif(%outspace == RGB1555,1,0)
n3257=  var %bgr1555 $iif(%outspace == BGR1555,1,0)
n3258=  var %xgx1555 $iif(%rgb1555 || %bgr1555,1,0)
n3259=  if %xgx1555 {
n3260=    var %outspace $omni.color.space(%outspace,1)
n3261=  }
n3262=  var %outcolor
n3263=  var %i 1
n3264=  while %i <= 3 {
n3265=    var %iin $findtok(%inspace,$gettok(%outspace,%i,32),32)
n3266=    var %c $calc($gettok(%incolor,%iin,32) * $omni.intmax($gettok(%outspace,$calc(%i + 3),32)) / $omni.intmax($gettok(%inspace,$calc(%iin + 3),32)))
n3267=    var %c $iif(%xgx1555,$floor(%c),$round(%c,0))
n3268=    var %outcolor %outcolor %c
n3269=    inc %i
n3270=  }
n3271=  if %rgb1555 || %bgr1555 {
n3272=    var %outcolor0
n3273=    var %outcolor1
n3274=    var %i 1
n3275=    while %i <= 3 {
n3276=      var %c $gettok(%outcolor,%i,32)
n3277=      var %c0 $iif(%c == 63,62,$and($calc(%c + 1),62))
n3278=      var %c1 $or(%c,1)
n3279=      var %outcolor0 %outcolor0 %c0
n3280=      var %outcolor1 %outcolor1 %c1
n3281=      inc %i
n3282=    }
n3283=    var %sim0 $omni.color.similarity(%incolor,%inspace,%outcolor0,%outspace)
n3284=    var %sim1 $omni.color.similarity(%incolor,%inspace,%outcolor1,%outspace)
n3285=    ; echo -s . %outcolor0 = %sim0 . %outcolor1 = %sim1
n3286=    var %outcolor $iif(%sim0 >= %sim1,%outcolor0,%outcolor1)
n3287=  }
n3288=  return %outcolor
n3289=}
n3290=/omni.color.similarity {
n3291=  var %space R G B 16 16 16
n3292=  var %c1 $omni.color.convert($1,$2,%space)
n3293=  var %c2 $omni.color.convert($3,$4,%space)
n3294=  ; http://www.compuphase.com/cmetric.htm
n3295=  ; A low-cost approximation
n3296=  var %r1 $gettok(%c1,1,32)
n3297=  var %r2 $gettok(%c2,1,32)
n3298=  var %rx $calc((%r1 + %r2) / 2 / 65535)
n3299=  var %dr $calc(%r1 - %r2)
n3300=  var %dg $calc($gettok(%c1,2,32) - $gettok(%c2,2,32))
n3301=  var %db $calc($gettok(%c1,3,32) - $gettok(%c2,3,32))
n3302=  var %dc $calc((((2 + %rx) * %dr * %dr) + (4 * %dg * %dg) + ((3 - %rx) * %db * %db)) ^ 0.5)
n3303=  return $calc((196605 - %dc) / 196605)
n3304=}
n3305=/omni.color.tostring {
n3306=  var %space $1
n3307=  var %colors $2
n3308=  var %list $chr(123)
n3309=  var %i 1
n3310=  while %i <= 3 {
n3311=    var %list %list $+ $iif(%i != 1,$chr(44) $+ $chr(32)) $+ $gettok(%colors,%i,32)
n3312=    inc %i
n3313=  }
n3314=  var %list %list $+ $chr(125)
n3315=  var %packed $omni.color.pack(%space,%colors)
n3316=  return %space $+ : $iif((%space == xLIBC) || (%space == RGB1555) || (%space == BGR1555),0x $+ %packed,%list $iif(%packed != $null,$chr(40) $+ 0x $+ %packed $+ $chr(41)))
n3317=}
n3318=/omni.color.pack {
n3319=  tokenize 32 $1-
n3320=  if ($1 == RGB24) || ($1 == BGR24) || ($1 == RGB888) || ($1 == BGR888) {
n3321=    return $base($2,10,16,2) $+ $base($3,10,16,2) $+ $base($4,10,16,2)
n3322=  }
n3323=  if ($1 == RGB16) || ($1 == BGR16) || ($1 == RGB565) || ($1 == BGR565) {
n3324=    return $base($calc(($2 * 64 + $3) * 32 + $4),10,16,4)
n3325=  }
n3326=  if ($1 == RGB1555) || ($1 == BGR1555) {
n3327=    var %c1 $floor($calc($2 / 2))
n3328=    var %c2 $floor($calc($3 / 2))
n3329=    var %c3 $floor($calc($4 / 2))
n3330=    return $base($calc(((($2 % 2) * 32 + %c1) * 32 + %c2) * 32 + %c3),10,16,4)
n3331=  }
n3332=  if ($1 == xLIBC) {
n3333=    return $base($calc(($3 * 32 + $4) % 256),10,16,2)
n3334=  }
n3335=}
n3336=/omni.color.unpack {
n3337=  if ($1 == xLIBC) {
n3338=    tokenize 32 RGB16 $2 $+ $2
n3339=  }
n3340=  var %c $base($2,16,10)
n3341=  if ($1 == RGB24) || ($1 == BGR24) {
n3342=    return $floor($calc(%c / 65536)) $floor($calc((%c % 65536) / 256)) $calc(%c % 256)
n3343=  }
n3344=  if ($1 == RGB16) || ($1 == BGR16) {
n3345=    return $floor($calc(%c / 2048)) $floor($calc((%c % 2048) / 32)) $calc(%c % 32)
n3346=  }
n3347=  if ($1 == RGB1555) || ($1 == BGR1555) {
n3348=    var %i $floor($calc(%c / 32768))
n3349=    return $calc($floor($calc((%c % 32768) / 1024)) * 2 + %i) $calc($floor($calc((%c % 1024) / 32)) * 2 + %i) $calc((%c % 32) * 2 + %i)
n3350=  }
n3351=}
n3352=/omni.color.space {
n3353=  if $1 == xLIBC {
n3354=    return $iif($2,R G B 5 6 5,xLIBC)
n3355=  }
n3356=  if ($1 == RGB1555) || $regex($1,/^1[-:]5[-:]5[-:]5$/) {
n3357=    return $iif($2,R G B 6 6 6,RGB1555)
n3358=  }
n3359=  if $1 == BGR1555) {
n3360=    return $iif($2,B G R 6 6 6,BGR1555)
n3361=  }
n3362=  if $regex($1,/^(?:(R)(G)(B)|(B)(G)(R))(15|16|24)$/i) {
n3363=    var %b $floor($calc($regml(4) / 3))
n3364=    return $upper($regml(1) $regml(2) $regml(3)) %b $iif($regml(4) == 16,6,%b) %b
n3365=  }
n3366=  if $regex($1,/^(\d+)[-:](\d+)[-:](\d+)$/) {
n3367=    return R G B $regml(1) $regml(2) $regml(3)
n3368=  }
n3369=  if (R isin $1) && (G isin $1) && (B isin $1) {
n3370=    if $regex($1,/^(.)\s*(.)\s*(.)\s*(\d)\s*(\d)\s*(\d)$/i) {
n3371=      return $upper($regml(1) $regml(2) $regml(3)) $regml(4) $regml(5) $regml(6)
n3372=    }
n3373=    if $regex($1,/^(.)\s*(\d+)\s*(.)\s*(\d+)\s*(.)\s*(\d+)$/i) {
n3374=      return $upper($regml(1) $regml(3) $regml(5)) $regml(2) $regml(4) $regml(6)
n3375=    }
n3376=  }
n3377=}
n3378=/omni.color.tospace {
n3379=  ; currently unused alias
n3380=  tokenize 32 $1-
n3381=  var %colors $remove($1-3,$chr(32))
n3382=  var %nums $remove($4-6,$chr(32))
n3383=  if (%colors == RGB) || (%colors == BGR) {
n3384=    if %nums == 565 {
n3385=      return %colors $+ 16
n3386=    }
n3387=    else if %nums == 888 {
n3388=      return %colors $+ 24
n3389=    }
n3390=  }
n3391=  var %out
n3392=  var %i 1
n3393=  while %i <= 3 {
n3394=    var %out %out $+ $mid(%colors,%i,1) $+ $mid(%nums,%i,1)
n3395=    inc %i
n3396=  }
n3397=  return %out
n3398=}
n3399=/omni.intmax {
n3400=  return $calc(2 ^ ($1-) - 1)
n3401=}
n3402=/tmp {
n3403=  var %i 1
n3404=  var %f $omni.file(colors.txt,ez80)
n3405=  var %f2 $omni.file(colors_rgb332.txt,ez80)
n3406=  var %l $lines(%f)
n3407=  while %i <= $lines(%f) {
n3408=    var %r $read(%f,%i)
n3409=    if $left(%r,1) == @ {
n3410=      omni.color . . . write %f2 echo . %r
n3411=    }
n3412=    else {
n3413=      write %f2 %r
n3414=    }
n3415=    inc %i
n3416=  }
n3417=}
